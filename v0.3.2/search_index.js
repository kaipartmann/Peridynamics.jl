var documenterSearchIndex = {"docs":
[{"location":"expl_references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"expl_references/","page":"References","title":"References","text":"P. Diehl, S. Prudhomme and M. Lévesque. A Review of Benchmark Experiments for the Validation of Peridynamics Models. Journal of Peridynamics and Nonlocal Modeling 1, 14–35 (2019).\n\n\n\nA. Javili, A. McBride and P. Steinmann. Continuum-kinematics-inspired peridynamics. Mechanical problems. Journal of the Mechanics and Physics of Solids 131 (2019).\n\n\n\nA. Javili, R. Morasata, E. Oterkus and S. Oterkus. Peridynamics review. Mathematics and Mechanics of Solids 24, 3714–3739 (2019).\n\n\n\nE. Madenci and E. Oterkus. Peridynamic Theory and Its Applications (Springer New York, New York, 2014).\n\n\n\nS. A. Silling. Reformulation of elasticity theory for discontinuities and long-range forces. Journal of the Mechanics and Physics of Solids 48, 175–209 (2000).\n\n\n\nS. A. Silling, M. Epton, O. Weckner, J. Xu and E. Askari. Peridynamic States and Constitutive Modeling. Journal of Elasticity 88, 151–184 (2007). Accessed on Oct 15, 2020.\n\n\n\nS. Silling and E. Askari. A meshfree method based on the peridynamic model of solid mechanics. Computers & Structures 83, 1526–1535 (2005).\n\n\n\nS. Silling and F. Bobaru. Peridynamic modeling of membranes and fibers. International Journal of Non-Linear Mechanics 40, 395–409 (2005). Special Issue in Honour of C.O. Horgan.\n\n\n\nJ. Trageser and P. Seleson. Bond-Based Peridynamics: a Tale of Two Poisson's Ratios. Journal of Peridynamics and Nonlocal Modeling 2, 278–288 (2020).\n\n\n\n","category":"page"},{"location":"howto_visualization/#visualization","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"The following section explains a few visualization basics with ParaView (ParaView 5.10.1 on macOS Monterey).","category":"page"},{"location":"howto_visualization/#Basics","page":"Visualization with ParaView","title":"Basics","text":"","category":"section"},{"location":"howto_visualization/#1.-Load-the-results","page":"Visualization with ParaView","title":"1. Load the results","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"Load the resulting .vtu files into ParaView with File rightarrow Open.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/a5cfb0f2-db8a-4c3b-9f9e-6fc1c66b3716\" width=\"600\" />","category":"page"},{"location":"howto_visualization/#2.-Select-the-time-array","page":"Visualization with ParaView","title":"2. Select the time array","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"Select the time array and all the parameters you want to analyze and then Apply.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/32246ca6-548d-4883-87e0-c9fb88baffd4\" width=\"1000\" />","category":"page"},{"location":"howto_visualization/#3.-Representation-and-coloring","page":"Visualization with ParaView","title":"3. Representation and coloring","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"Change the representation to Points and then choose the coloring parameter.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/78c618e8-0a3b-455c-a1f7-707079714479\" width=\"1000\" />","category":"page"},{"location":"howto_visualization/#4.-Point-styling","page":"Visualization with ParaView","title":"4. Point styling","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"Activate the setting to render points as spheres and set an appropriate point size.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/484cdf0a-16ac-4c64-b2b4-9ad96ca6c817\" width=\"1000\" />","category":"page"},{"location":"howto_visualization/#5.-Legend-styling","page":"Visualization with ParaView","title":"5. Legend styling","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"By default, the legend limits are set for the current range of the coloring parameter. In this example, for the initial time step all damage values are zero so strange legend limits appear.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/7a38a834-1157-469b-9b79-3c3b24388c39\" width=\"1000\" />","category":"page"},{"location":"howto_visualization/#6.-Save-animation","page":"Visualization with ParaView","title":"6. Save animation","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"To generate a animation, use File rightarrow Save Animation... and follow the instructions.","category":"page"},{"location":"howto_visualization/#Additional-Learning-Resources","page":"Visualization with ParaView","title":"Additional Learning Resources","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"ParaView has a great documentation and a lot of resources for learning. For example, see:","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"ParaView Documentation\nParaView User's Guide","category":"page"},{"location":"expl_nosbased/#expl_nosb","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"","category":"section"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"Non-ordinary state based-formulations have been developed to extend state-based peridynamics. Hereafter, the correspondence formulation of non-ordinary state based peridynamics is considered, which uses an elastic model from the classical theory. [SEW+07]","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"First, the symmetric shape tensor is calculated:","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"boldsymbolK^i = boldsymbolK(boldsymbolX^i) = int_mathcalH_i omega  boldsymbolDelta X^ij otimes boldsymbolDelta X^ij  mathrmdV^j  ","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"Here, omega is an influence function to weigh points differently. The deformation gradient is thus approximated as [SEW+07]","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"boldsymbolF^i = boldsymbolF(boldsymbolX^it) = left(int_mathcalH_i omega  boldsymbolDelta x^ij otimes boldsymbolDelta X^ij  mathrmdV^jright) left(boldsymbolK^iright)^-1  ","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"Using the deformation gradient, now the first Piola-Kirchhoff stress tensor can be determined with the Helmholtz energy density Psi:","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"boldsymbolP^i = boldsymbolP(boldsymbolX^it) = fracpartial Psipartial boldsymbolF^i  = boldsymbolF boldsymbolS  ","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"Using the calculated variables, the force vector state can now be determined by [SEW+07]","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"boldsymbolt^i = omega boldsymbolP^i  left(boldsymbolK^iright)^-1 boldsymbolDelta X^ij  ","category":"page"},{"location":"expl_nosbased/","page":"Non-ordinary state-based peridynamics","title":"Non-ordinary state-based peridynamics","text":"Size Symbol Unit\nBond in mathcalB_0 boldsymbolDelta X^ij mathrmm\nBond in mathcalB_t boldsymbolDelta x^ij mathrmm\nInfluence function omega -\nVolume of point j V^j leftmathrmm^3right\nSymmetric shape tensor boldsymbolK^i leftmathrmm^5right\nDeformation gradient boldsymbolF^i -\nHelmholtz energy density Psi leftfracmathrmkgmathrmmmathrms^2right\nPiola-Kirchhoff stress tensor boldsymbolP^i leftfracmathrmkgmathrmmmathrms^2right\nForce vector state boldsymbolt^i leftfracmathrmkgmathrmm^5mathrms^2right","category":"page"},{"location":"expl_continuumbased/#expl_cki","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"","category":"section"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Continuum-kinematics-inspired peridynamics (CPD) is a formulation that is supposed to deliver more freedom in specifying material parameters. The internal force density is calculated as the sum of three types of point interactions which are one-, two- and three-neighbor interactions [JMS19]:","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"boldsymbolb^mathrminti = boldsymbolb_1^mathrminti + boldsymbolb_2^mathrminti + boldsymbolb_3^mathrminti  ","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Size Symbol Unit\nInternal force density boldsymbolb^mathrminti leftfracmathrmkgmathrmm^2mathrms^2right\nForce density shares due to one-, two- & three-neighbor interactions boldsymbolb_1^mathrminti , boldsymbolb_2^mathrminti , boldsymbolb_3^mathrminti leftfracmathrmkgmathrmm^2mathrms^2right","category":"page"},{"location":"expl_continuumbased/#One-neighbor-interactions","page":"Continuum-kinematics-inspired peridynamics","title":"One-neighbor interactions","text":"","category":"section"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/0380b1b8-4527-4f38-a20e-435a6f1c8ba1\" width=\"250\"/>","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"One-neighbor interactions in CPD correspond to the bonds in bond-based peridynamics, but there is a slightly different way to calculate the internal forces.","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"First, the neighborhood volume is determined:","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"V_mathcalH^i = beta^i  frac 4 3  pi  delta^3  ","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Here beta^iin 01 is a factor for the completeness of the neighborhood that takes incomplete point families at the surface into account (see figure 1).","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/b899c8d3-e358-4d4d-b52f-13b6c0af747b\" width=\"350\"/>","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Now, the effective one-neighbor volume can be calculated","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"V_1^i = fracV_mathcalH^iN_1^i","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"with the number of interactions N_1^i.","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"The internal force density is determined by","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"    boldsymbolb_1^mathrminti = int_mathcalH_1^i C_1 left( fracl^ijL^ij - 1 right) fracboldsymbolDelta x^ijl^ij  mathrmd V_1^i","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"with the parameters:","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Size Symbol Unit\nNeighborhood volume V_mathcalH^i mathrmm^3\nNeighborhood completeness beta^iin 01 -\nEffective one-neighbor volume V_1^i mathrmm^3\nNumber of one-neighbor interactions N_1^i -\nMaterial constant C_1 fracmathrmkgmathrmm^5mathrms^2\nRelative length measures L^ij, l^ij mathrmm","category":"page"},{"location":"expl_continuumbased/#Two-neighbor-interactions","page":"Continuum-kinematics-inspired peridynamics","title":"Two-neighbor interactions","text":"","category":"section"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/5b340634-7c3f-4ddf-a056-06c31564077c\" width=\"250\"/>","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"For two-neighbor interactions, the deformation of the area spanned by point i and two of its neighbors j and k is analyzed to calculate the internal force density. For this, relative area measures are defined:","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"    A^ijk=left boldsymbolDelta X^ij times boldsymbolDelta X^ik right   qquad a^ijk=left boldsymbolDelta x^ij times boldsymbolDelta x^ik right   qquad boldsymbola^ijk= boldsymbolDelta x^ij times boldsymbolDelta x^ik  ","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Other sizes needed to identify the force density are the material constant C_2 and the effective two-neighbor volume","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"    V_2^i = fracleft(V_mathcalH^iright)^2N_2^i","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"with the number of interactions N_2. ","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"The internal force density induced by two-neighbor interactions is ","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"    boldsymbolb_2^mathrmint  i = \n2  C_2 int_mathcalH_2^i left( fraca^ijkA^ijk - 1 right)\nfracboldsymbolDelta x^ik times boldsymbola^ijka^ijk  mathrmd V_2^i  ","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Size Symbol Unit\nRelative area measures A^ijk, a^ijk, boldsymbola^ijk mathrmm^2\nEffective two-neighbor volume V_2^i mathrmm^6\nNumber of two-neighbor interactions N_2^i -\nMaterial constant C_2 fracmathrmkgmathrmm^9mathrms^2","category":"page"},{"location":"expl_continuumbased/#Three-neighbor-interactions","page":"Continuum-kinematics-inspired peridynamics","title":"Three-neighbor interactions","text":"","category":"section"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/e908c804-a6d4-4bf6-b75a-988f33989213\" width=\"250\"/>","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Three-neighbor interactions regard the volume defined by the bond vectors between point i and its three neighbors j, k and l:","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"V^ijkl = left(boldsymbolDelta X^ij times boldsymbolDelta X^ikright) cdot boldsymbolDelta X^il  qquad\n    v^ijkl = left(boldsymbolDelta x^ij times boldsymbolDelta x^ikright) cdot boldsymbolDelta x^il  ","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Additionally, the effective three-neighbor volume","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"    V_3^i = frac left(V_mathcalH^iright)^3N_3^i  ","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"is defined. For the internal force density of three-neighbor interactions, the equation","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"boldsymbolb_3^mathrmint  i = \n3  C_3 int_mathcalH_3^i left( fracleftv^ijklrightleftV^ijklright - 1 right)\nfracleft(boldsymbolDelta x^ik times boldsymbolDelta x^ilright) v^ijklleftv^ijklright  mathrmd V_3^i","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"with the material constant C_3 is used.","category":"page"},{"location":"expl_continuumbased/","page":"Continuum-kinematics-inspired peridynamics","title":"Continuum-kinematics-inspired peridynamics","text":"Size Symbol Unit\nRelative volume measures V^ijkl, v^ijkl mathrmm^3\nEffective three-neighbor volume V_3^i mathrmm^9\nNumber of three-neighbor interactions N_3^i -\nMaterial constant C_3 fracmathrmkgmathrmm^13mathrms^2","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"EditURL = \"../literate/tutorial_tension_dynfrac.jl\"","category":"page"},{"location":"generated/tutorial_tension_dynfrac/#tutorial_tension_dynfrac","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"","category":"section"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"Import the package:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"Read and convert the Abaqus FEM mesh of a tensile test into a point cloud for the peridynamic model:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"# insert your correct path to the downloaded mesh file!\ninp_file = joinpath(@__DIR__, \"..\", \"assets\", \"TensileTestMesh.inp\");\nnothing #hide","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"Create a body with the points from the mesh: (The bond-based material model with energy based surface correction is used here.)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"body = Body(BBMaterial(), inp_file)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"The element sets defined in Abaqus were converted into point sets of the Body:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"point_sets(body)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"Specify the material parameters as:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"material parameter value\nHorizon $ δ $ 001  mathrmm\nDensity ρ $ 2700 \\,\\mathrm{kg}\\,\\mathrm{m}^{-3}$\nYoung's modulus E $ 70 \\cdot 10^{9} \\, \\mathrm{Pa}$\nGriffith's parameter G_c 100  mathrmN  mathrmm^-1","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"material!(body; horizon=0.01, rho=2700, E=70e9, Gc=100)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"As loading condition for the specimen, a constant velocity of 06  mathrmmmathrms^-1 in x-direction is set for the bottom and top.","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"velocity_bc!(t -> -0.6, body, :bottom, 1)\nvelocity_bc!(t -> 0.6, body, :top, 1)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"Set the number of time steps for the Velocity Verlet algorithm to 500 time steps:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"vv = VelocityVerlet(steps=500)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"Create the job:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"job = Job(body, vv; path=\"results/tension_dynamic_fracture\")","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"Submit the job to start simulations:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"submit(job)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Tensile test dynamic","title":"Tensile test dynamic","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"EditURL = \"../literate/tutorial_tension_precrack.jl\"","category":"page"},{"location":"generated/tutorial_tension_precrack/#tutorial_tension_precrack","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"","category":"section"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"Import the package:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"First some geometrical parameters are defined. These are edge length l, point spacing Δx and crack length a. Now a cuboid body with the specified edge lengths and a thickness of one tenth thereof is created using the bond-based material model.","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"l, Δx, a = 1.0, 1/50, 0.5\npos, vol = uniform_box(l, l, 0.1l, Δx)\nbody = Body(BBMaterial(), pos, vol)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"The following material parameters are set:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"material parameter value\nHorizon $ δ $ 3015 cdot Δx\nYoung's modulus E $ 210000 \\, \\mathrm{MPa}$\nDensity ρ $ 8 \\cdot 10^{-6}\\,\\mathrm{kg}\\,\\mathrm{mm}^{-3}$\nGriffith's parameter G_c 27  mathrmN  mathrmmm^-1","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"δ = 3.015Δx\nmaterial!(body; horizon=δ, E=2.1e5, rho=8e-6, Gc=2.7)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"Two point sets are defined to insert a crack between them:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"point_set!(p -> p[1] ≤ -l/2+a && 0 ≤ p[2] ≤ 2δ, body, :set_a)\npoint_set!(p -> p[1] ≤ -l/2+a && -2δ ≤ p[2] < 0, body, :set_b)\nprecrack!(body, :set_a, :set_b)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"Two more point sets at the top and at the bottom are created, which are used for the velocity boundary condition.","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"point_set!(p -> p[2] > l/2-Δx, body, :set_top)\npoint_set!(p -> p[2] < -l/2+Δx, body, :set_bottom)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"The tension is applied by moving the ends of the body apart at a constant speed of pm 50  mathrmmm  mathrms^-1:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"velocity_bc!(t -> -30, body, :set_bottom, :y)\nvelocity_bc!(t -> 30, body, :set_top, :y)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"The Velocity Verlet algorithm is used as time integration method and 2000 time steps are calculated:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"vv = VelocityVerlet(steps=2000)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"Now the job is defined","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"job = Job(body, vv; path=\"results/mode_i_tension_precrack\")","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"Finally the job is submitted to start simulations","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"submit(job)","category":"page"},{"location":"generated/tutorial_tension_precrack/#Damage-results:","page":"Tension with predefined crack","title":"Damage results:","text":"","category":"section"},{"location":"generated/tutorial_tension_precrack/","page":"Tension with predefined crack","title":"Tension with predefined crack","text":"(Image: )","category":"page"},{"location":"expl_damage/#expl_dmg","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"","category":"section"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"For damage simulations with peridynamics, some slight extensions to the material formulations need to be made.","category":"page"},{"location":"expl_damage/#Bond-based-formulation","page":"Damage in peridynamics formulations","title":"Bond-based formulation","text":"","category":"section"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"In bond-based peridynamics, the pairwise force function is expanded by the factor d^ij, which states whether the bond between points i and j is intact (d^ij=1) or damaged (d^ij=0). Therefore the pairwise force function reads","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":" boldsymbolf = d^ij  c  varepsilon^ij  boldsymboln ","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"with the bond failure quantity d^ij in 01.","category":"page"},{"location":"expl_damage/#State-based-formulation","page":"Damage in peridynamics formulations","title":"State-based formulation","text":"","category":"section"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"In all state-based peridynamic formulations, damage is introduced by using a failure considering influence function:","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":" omega_d = d^ij  omega","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"with the bond failure quantity d^ij in 01.","category":"page"},{"location":"expl_damage/#Continuum-kinematics-inspired-formulation","page":"Damage in peridynamics formulations","title":"Continuum-kinematics-inspired formulation","text":"","category":"section"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"For continuum-kinematics-inspired peridynamics there are three different bond failure factors, one for each kind of interaction. For one-neighbor interactions it is similar to the failure in the bond-based formulation. Here the internal force density due to one-neighbor interactions is","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"    boldsymbolb_1^mathrminti = int_mathcalH_1^i d^ij C_1 left( fracl^ijL^ij - 1 right) fracboldsymbolDelta x^ijl^ij  mathrmd V_1^i","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"with the bond failure quantity d^ij in 01.","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"In two-neighbor interactions a factor describing the failure of the considered area element is included:","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"    boldsymbolb_2^mathrmint  i = \n2  C_2 int_mathcalH_2^i d^ijk left( fraca^ijkA^ijk - 1 right)\nfracboldsymbolDelta x^ik times boldsymbola^ijka^ijk  mathrmd V_2^i ","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"with the two-neighbor interaction failure quantity d^ijk in 01.","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"For three-neighbor interactions the internal force density eventually reads","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"boldsymbolb_3^mathrmint  i = \n3  C_3 int_mathcalH_3^i d^ijkl left( fracleftv^ijklrightleftV^ijklright - 1 right)\nfracleft(boldsymbolDelta x^ik times boldsymbolDelta x^ilright) v^ijklleftv^ijklright  mathrmd V_3^i","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"with the three-neighbor interaction failure quantity d^ijkl in 01.","category":"page"},{"location":"expl_damage/","page":"Damage in peridynamics formulations","title":"Damage in peridynamics formulations","text":"Size Symbol Unit\nBond failure quantity d^ij in 01 -\nTwo-neighbor interaction failure quantity d^ijk in 01 -\nThree-neighbor interaction failure quantity d^ijkl in 01 -","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"EditURL = \"../literate/tutorial_kalthoff-winkler_dynfrac.jl\"","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#tutorial_kalthoff-winkler","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"This tutorial demonstrates how to set up and run the Kalthoff-Winkler experiment using the Peridynamics.jl package. The Kalthoff-Winkler experiment is a classic dynamic fracture experiment involving a pre-notched sample subjected to impact loading.","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#Introduction","page":"Kalthoff-Winkler experiment","title":"Introduction","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"The Kalthoff-Winkler experiment is widely used to study fracture mechanics under high strain rates. This setup provides valuable insights into the behavior of materials under dynamic loading conditions, making it an interesting experiment in the field of fracture mechanics.","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"In this tutorial, we will simulate the Kalthoff-Winkler experiment using peridynamics without the impactor. To do so, first we would import the package.","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#Geometrical-Parameters","page":"Kalthoff-Winkler experiment","title":"Geometrical Parameters","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"Define the sample length l, width w, and thickness t, with point spacing Δx, horizon size $ δ $ and crack length a.","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"l  = 200.0E-3  # Length of the sample (meters)\nw  = 100.0E-3  # Width of the sample (meters)\nt  =   9.0E-3  # Thickness of the sample (meters)\nΔx =   1.0E-3  # Discretization size (meters)\nδ  =  4.015Δx  # Horizon (meters)\na  =  50.0E-3  # Crack length (meters)\nnothing #hide","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#Create-the-Body","page":"Kalthoff-Winkler experiment","title":"Create the Body","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"Create a body with the specified dimensions using the bond-based material model with surface corrections:","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"pos, vol = uniform_box(l, w, t, Δx)\nbody = Body(BBMaterial{EnergySurfaceCorrection}(), pos, vol)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#Material-Parameters","page":"Kalthoff-Winkler experiment","title":"Material Parameters","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"The following material parameters are set:","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"material parameter value\nHorizon $ δ $ 4015 cdot Δx\nYoung's modulus E $ 191\\cdot 10^{9} \\, \\mathrm{Pa}$\nDensity ρ $ 8000 ,\\mathrm{kg}\\,\\mathrm{m}^{-3}$\nCritical stretch varepsilon_c 001","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"material!(body; horizon=δ, E=191.0e9, rho=8000.0, epsilon_c=0.015)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#Define-Pre-cracks","page":"Kalthoff-Winkler experiment","title":"Define Pre-cracks","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"Define the point sets to insert a crack at the left side of the domain (-x):","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"point_set!(p -> -a / 2 - δ ≤ p[1] ≤ -a / 2 && 0 ≤ p[2] < w / 2, body, :set_crack1_a)\npoint_set!(p -> -a / 2 ≤ p[1] ≤ -a / 2 + δ && 0 ≤ p[2] < w / 2, body, :set_crack1_b)\nprecrack!(body, :set_crack1_a, :set_crack1_b)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"Define the point sets to insert a crack at the right side of the domain (+x):","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"point_set!(p -> a / 2 - δ ≤ p[1] ≤ a / 2 && 0 ≤ p[2] < w / 2, body, :set_crack2_a)\npoint_set!(p -> a / 2 ≤ p[1] ≤ a / 2 + δ && 0 ≤ p[2] < w / 2, body, :set_crack2_b)\nprecrack!(body, :set_crack2_a, :set_crack2_b)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#Velocity-Boundary-Condition","page":"Kalthoff-Winkler experiment","title":"Velocity Boundary Condition","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"Apply a velocity boundary condition that is active for 01  mathrmms on the top edge:","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"point_set!(p -> -a / 2 < p[1] < a / 2 && p[2] ≥ w / 2 - 4Δx, body, :set_top)\nvelocity_bc!(t -> t < 0.0001 ? -32.0 : NaN, body, :set_top, :y)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"A layer of 3 points at the uncracked boundary is not allowed to obtain failure.","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"point_set!(y -> y < -w / 2 + 3Δx, body, :no_fail_zone)\nfailure_permit!(body, :no_fail_zone, false)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#Simulation","page":"Kalthoff-Winkler experiment","title":"Simulation","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"Use the Velocity Verlet algorithm as the time integration method and calculate 2000 time steps:","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"vv = VelocityVerlet(time=0.0003, safety_factor=0.8)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"Define the storage path:","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"path = joinpath(\"results\", \"KW\")\nispath(path) && rm(path; recursive=true)  # Delete existing results if they exist","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"Create and submit the job:","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"job = Job(body, vv; path=path)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"@mpitime submit(job)","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"(Image: )","category":"page"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/#Conclusion","page":"Kalthoff-Winkler experiment","title":"Conclusion","text":"","category":"section"},{"location":"generated/tutorial_kalthoff-winkler_dynfrac/","page":"Kalthoff-Winkler experiment","title":"Kalthoff-Winkler experiment","text":"This tutorial demonstrated how to set up and run the Kalthoff-Winkler experiment using Peridynamics.jl. By simulating this experiment, we can gain insights into the dynamic fracture behavior of materials under high strain rates.","category":"page"},{"location":"expl_osbased/#expl_osb","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"","category":"section"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"The state-based peridynamics formulation considers not only the deformation of the bonds of one material point, but also the states of all neighbors to calculate the internal force density boldsymbolb^mathrminti as","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"boldsymbolb^mathrminti = boldsymbolb^mathrmint (boldsymbolX^it) = int_mathcalH_i boldsymbolt^i - boldsymbolt^j  mathrmdV^j  ","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"with the force vector states boldsymbolt^i=boldsymbolt(boldsymbolDelta X^ij t) and boldsymbolt^j=boldsymbolt(-boldsymbolDelta X^ij t), which characterize the state of each bond at time t [SEW+07]. To determine the force vector states, the weighted volume m_i is calculated first as","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"m_i = m left( boldsymbolX^i right) = int_mathcalH_i omega   boldsymbolDelta X^ij ^2  mathrmd V^j  ","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"Here, omega is the influence function that gives a greater influence to neighbors near the root point. [SEW+07] Then the dilatation theta_i is needed, which is defined with the weighted volume m_i as","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"theta_i = theta left( boldsymbolX^i right) = frac3m_i int_mathcalH_i omega   boldsymbolDelta X^ij   left( boldsymbolDelta x^ij-boldsymbolDelta X^ij right) mathrmd V^j  ","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"With the previously determined variables, the force vector state boldsymbolt^i is defined as ","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"boldsymbolt^i left( boldsymbolDelta X^ij right) = fracK  theta_im_i  omega   boldsymbolDelta X^ij  + frac15  Gm_i  omega  left( boldsymbolDelta x^ij-boldsymbolDelta X^ij - fractheta_i  boldsymbolDelta X^ij3 right)  ","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"with shear modulus G and bulk modulus K [SEW+07].","category":"page"},{"location":"expl_osbased/","page":"Ordinary state-based peridynamics","title":"Ordinary state-based peridynamics","text":"Size Symbol Unit\nInternal force density boldsymbolb^mathrminti leftfracmathrmkgmathrmm^2mathrms^2right\nForce vector state $ \\boldsymbol{t}^i $ leftfracmathrmkgmathrmm^5mathrms^2right\nVolume of point j V^j leftmathrmm^3right\nBond in mathcalB_0 boldsymbolDelta X^ij mathrmm\nBond in mathcalB_t boldsymbolDelta x^ij mathrmm\nBond length in mathcalB_0 leftboldsymbolDelta X^ijright mathrmm\nBond length in mathcalB_t leftboldsymbolDelta x^ijright mathrmm\nInfluence function omega -\nWeighted volume $ m_i $ leftmathrmm^5right\nDilatation theta_i -\nShear modulus G leftfracmathrmkgmathrmmmathrms^2right\nBulk modulus K leftfracmathrmkgmathrmmmathrms^2right","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"EditURL = \"../literate/tutorial_tension_static.jl\"","category":"page"},{"location":"generated/tutorial_tension_static/#tutorial_tension_static","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"","category":"section"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"Import the package:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"Read and convert the Abaqus FEM mesh of a tensile test into a point cloud for the peridynamic model:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"# insert your correct path to the downloaded mesh file!\ninp_file = joinpath(@__DIR__, \"..\", \"assets\", \"TensileTestMesh.inp\");\nnothing #hide","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"Create a body with the points from the mesh: (The bond-based material model is used here.)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"body = Body(BBMaterial(), inp_file)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"The element sets defined in Abaqus were converted into point sets of the Body:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"point_sets(body)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"Specify the material parameters as:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"material parameter value\nHorizon $ δ $ 001  mathrmm\nDensity ρ $ 2700 \\,\\mathrm{kg}\\,\\mathrm{m}^{-3}$\nYoung's modulus E $ 70 \\cdot 10^{9} \\, \\mathrm{Pa}$\nGriffith's parameter G_c 100  mathrmN  mathrmm^-1","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"material!(body; horizon=0.01, rho=2700, E=70e9, Gc=100)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"As loading condition for the specimen, a constant force density of 1 times 10^9  mathrmNmathrmm^-3 in x-direction is set for the bottom and top.","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"forcedensity_bc!(t -> -3e11, body, :bottom, 1)\nforcedensity_bc!(t -> 3e11, body, :top, 1)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"Do not allow failure in the entire body:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"failure_permit!(body, false)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"We set the number of time steps for the dynamic relaxation algorithm to 500 time steps.","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"dr = DynamicRelaxation(steps=500, damping_factor=0.2)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"Create the job:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"job = Job(body, dr; path=\"results/tension_static\")","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"submit(job)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Tensile test quasi-static","title":"Tensile test quasi-static","text":"(Image: )","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"EditURL = \"../literate/tutorial_logo.jl\"","category":"page"},{"location":"generated/tutorial_logo/#tutorial_logo","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"","category":"section"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"(Image: )","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"(Visualization made with ParaView)","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"The Julia logo crashing into a plate and braking it into many pieces.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"First, we have to load the Peridynamics.jl package.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_logo/#Plate","page":"The old Peridynamics.jl logo","title":"Plate","text":"","category":"section"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Now we create the plate in the background by specifying the dimensions and the point spacing.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"lxy = 0.1\nlz = 0.01\nΔX₀ₚ = lxy / 50\nposₚ, volₚ = uniform_box(lxy, lxy, lz, ΔX₀ₚ)\nplate = Body(BBMaterial{EnergySurfaceCorrection}(), posₚ, volₚ)","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Then we define the material properties for the plate.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Horizon delta = 3015 Delta x_p\nDensity rho = 2000mathrmkgmathrmm^-3\nYoungs modulus E = 30 times 10^9  mathrmPa\nGriffith's parameter G_c = 10  mathrmN  mathrmm^-1","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"material!(plate; horizon=3.015ΔX₀ₚ, E=30e9, rho=2000, Gc=10)","category":"page"},{"location":"generated/tutorial_logo/#Julia-logo-spheres","page":"The old Peridynamics.jl logo","title":"Julia-logo spheres","text":"","category":"section"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"A spherical body is created, where only the points inside a specified radius are preserved to create the spheres of the logo. These points are then copied three times and moved to the correct position to represent the logo.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Ø = 0.03\nΔX₀ₛ = Ø / 20\ncz = Ø / 2 + lz / 2 + 1.1 * ΔX₀ₛ\nr_logo = Ø / 2 + 0.2 * Ø\nsxy, cxy = r_logo * sin(30π / 180), r_logo * cos(30π / 180)\nposₛ₁, volₛ₁ = uniform_sphere(Ø, ΔX₀ₛ; center_y=r_logo, center_z=cz)\nposₛ₂, volₛ₂ = uniform_sphere(Ø, ΔX₀ₛ; center_x=cxy, center_y=-sxy, center_z=cz)\nposₛ₃, volₛ₃ = uniform_sphere(Ø, ΔX₀ₛ; center_x=-cxy, center_y=-sxy, center_z=cz)\nsphere₁ = Body(BBMaterial(), posₛ₁, volₛ₁)\nsphere₂ = Body(BBMaterial(), posₛ₂, volₛ₂)\nsphere₃ = Body(BBMaterial(), posₛ₃, volₛ₃)","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Material properties for the spheres are specified.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Horizon delta = 3015 Delta x_s\nDensity rho = 7850mathrmkgmathrmm^-3\nYoungs modulus E = 210 times 10^9  mathrmPa\nGriffith's parameter G_c = 1000  mathrmN  mathrmm^-1","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"All material points of the spheres have a initial velocity of -20 mathrmm  mathrms^-1 in z-direction.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"for sphere in (sphere₁, sphere₂, sphere₃)\n    material!(sphere; horizon=3.015ΔX₀ₛ, E=210e9, rho=7850, Gc=1000)\n    velocity_ic!(sphere, :all_points, :z, -20)\nend","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Multibody Setup? For the contact analysis, all bodies need to be specified in a MultibodySetup.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"ms = MultibodySetup(:plate => plate, :sphere1 => sphere₁, :sphere2 => sphere₂,\n                    :sphere3 => sphere₃)","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Contact between the plate and the three spheres needs to be specified.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"contact!(ms, :plate, :sphere1; radius=ΔX₀ₚ)\ncontact!(ms, :plate, :sphere2; radius=ΔX₀ₚ)\ncontact!(ms, :plate, :sphere3; radius=ΔX₀ₚ)","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"For this simulation, 3000 time steps with explicit time integration and the Velocity Verlet algorithm are used.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"vv = VelocityVerlet(steps=3000)","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"Now we create a directory for the results and create a Job.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"job = Job(ms, vv; path=\"results/logo\")","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"To complete everything, the Job is submitted for simulation.","category":"page"},{"location":"generated/tutorial_logo/","page":"The old Peridynamics.jl logo","title":"The old Peridynamics.jl logo","text":"submit(job)","category":"page"},{"location":"expl_general_pd/#expl_pd_basics","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"","category":"section"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"Peridynamics is a nonlocal continuum mechanics formulation, which was introduced by Silling [Sil00]. It has gained increased popularity as an approach for modeling fracture. The deformation of the solid is described by integro-differential equations that are also fulfilled for discontinuities, making it very capable of modeling crack propagation and fragmentation with large displacements. Much peridynamics research has been done in recent years, summarized in various review papers and books [DPL19, JMOO19, MO14].","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/728da1f0-4750-4ab6-a430-9b206e475577\" width=\"300\"/>","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"Typically, in peridynamics the continuum is discretized by material points. Points interact only with other points inside of their specified neighborhood or point family mathcalH, which is defined as the set of points inside a sphere with the radius delta, also named the horizon. The interaction of the point boldsymbolX with its neighbor boldsymbolX is called bond and defined as","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"boldsymbolDelta X = boldsymbolX - boldsymbolX  ","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"The equation of motion reads","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"varrho  boldsymbolddotu(boldsymbolXt) = boldsymbolb^mathrmint(boldsymbolXt) + boldsymbolb^mathrmext(boldsymbolXt)  ","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"with the mass density varrho, the point acceleration vector boldsymbolddotu, and the point force density vectors boldsymbolb^mathrmint and boldsymbolb^mathrmext. Various material formulations of peridynamics exist for the calculation of the internal force density boldsymbolb^mathrmint, and all of them are based on the nonlocal interactions between material points.","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"The general internal force density for state-based peridynamics is defined as","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"boldsymbolb^mathrmint (boldsymbolXt) = int_mathcalH boldsymbolt - boldsymbolt  mathrmdV  ","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"with the force vector states boldsymbolt=boldsymbolt(boldsymbolDelta X t) and boldsymbolt=boldsymbolt(-boldsymbolDelta X t). In the first original bond-based formulation of peridynamics, the force vector states boldsymbolt and  boldsymbolt have the same value and opposite direction. This implies intrinsic limitation to only one material parameter and in consequence to restrictions on the Poisson's ratio [SEW+07, TS20]. To overcome these restrictions, state-based peridynamics was established. In the ordinary state-based peridynamics, the deformation states of neighboring points also influence the internal force density [SEW+07]. This leads to force vector states which are still collinear but not of same value anymore.","category":"page"},{"location":"expl_general_pd/","page":"Basics of peridynamics theory","title":"Basics of peridynamics theory","text":"Further developments are summarized as non-ordinary state-based peridynamics. A recent development in this regard is continuum-kinematics-inspired peridynamics [JMS19]. Another peridynamic formulation is the local continuum consistent correspondence formulation of non-ordinary state-based peridynamics, where an elastic model from the classical local material theory can be used to calculate the internal force density.","category":"page"},{"location":"api_reference/#Peridynamics.jl-public-API","page":"API Reference","title":"Peridynamics.jl public API","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Pages = [\"api_reference.md\"]","category":"page"},{"location":"api_reference/#Material-models","page":"API Reference","title":"Material models","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"BBMaterial\nOSBMaterial\nNOSBMaterial\nCKIMaterial","category":"page"},{"location":"api_reference/#Peridynamics.BBMaterial","page":"API Reference","title":"Peridynamics.BBMaterial","text":"BBMaterial()\nBBMaterial{Correction}()\n\nA material type used to assign the material of a Body with the standard bond-based formulation of peridynamics.\n\nPossible correction methods are:\n\nNoCorrection: No correction is applied. (default)\nEnergySurfaceCorrection: The energy based surface correction method of   Le and Bobaru (2018) is applied.\n\nExamples\n\njulia> mat = BBMaterial()\nBBMaterial{NoCorrection}()\n\njulia> mat = BBMaterial{EnergySurfaceCorrection}()\nBBMaterial{EnergySurfaceCorrection}()\n\n\n\nBBMaterial{Correction}\n\nMaterial type for the bond-based peridynamics formulation.\n\nType Parameters\n\nCorrection: A correction algorithm type. See the constructor docs for more informations.\n\nAllowed material parameters\n\nWhen using material! on a Body with BBMaterial, then the following parameters are allowed:\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nnote: Poisson's ratio and bond-based peridynamics\nIn bond-based peridynamics, the Poisson's ratio is limited to 1/4 for 3D simulations. Therefore the specification of this keyword is not allowed when using material!, as it is hardcoded to nu = 1/4.\n\nAllowed export fields\n\nWhen specifying the fields keyword of Job for a Body with BBMaterial, the following fields are allowed:\n\nposition::Matrix{Float64}: Position of each point\ndisplacement::Matrix{Float64}: Displacement of each point\nvelocity::Matrix{Float64}: Velocity of each point\nvelocity_half::Matrix{Float64}: Velocity parameter for Verlet time solver\nacceleration::Matrix{Float64}: Acceleration of each point\nb_int::Matrix{Float64}: Internal force density of each point\nb_ext::Matrix{Float64}: External force density of each point\ndamage::Vector{Float64}: Damage of each point\nn_active_bonds::Vector{Int}: Number of intact bonds of each point\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.OSBMaterial","page":"API Reference","title":"Peridynamics.OSBMaterial","text":"OSBMaterial()\nOSBMaterial{Correction}()\n\nA material type used to assign the material of a Body with the ordinary state-based formulation of peridynamics.\n\nPossible correction methods are:\n\nNoCorrection: No correction is applied (default)\nEnergySurfaceCorrection: The energy based surface correction method of   Le and Bobaru (2018) is applied\n\nExamples\n\njulia> mat = OSBMaterial()\nOSBMaterial{NoCorrection}()\n\njulia> mat = OSBMaterial{EnergySurfaceCorrection}()\nOSBMaterial{EnergySurfaceCorrection}()\n\n\n\nOSBMaterial{Correction}\n\nMaterial type for the ordinary state-based peridynamics formulation.\n\nType Parameters\n\nCorrection: A correction algorithm type. See the constructor docs for more informations.\n\nAllowed material parameters\n\nWhen using material! on a Body with OSBMaterial, then the following parameters are allowed:\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nnu::Float64: Poisson's ratio\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nAllowed export fields\n\nWhen specifying the fields keyword of Job for a Body with OSBMaterial, the following fields are allowed:\n\nposition::Matrix{Float64}: Position of each point\ndisplacement::Matrix{Float64}: Displacement of each point\nvelocity::Matrix{Float64}: Velocity of each point\nvelocity_half::Matrix{Float64}: Velocity parameter for Verlet time solver\nacceleration::Matrix{Float64}: Acceleration of each point\nb_int::Matrix{Float64}: Internal force density of each point\nb_ext::Matrix{Float64}: External force density of each point\ndamage::Vector{Float64}: Damage of each point\nn_active_bonds::Vector{Int}: Number of intact bonds of each point\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.NOSBMaterial","page":"API Reference","title":"Peridynamics.NOSBMaterial","text":"NOSBMaterial(; maxdmg, maxjacobi, corr)\n\nA material type used to assign the material of a Body with the local continuum consistent (correspondence) formulation of non-ordinary state-based peridynamics.\n\nKeywords\n\nmaxdmg::Float64: Maximum value of damage a point is allowed to obtain. If this value is   exceeded, all bonds of that point are broken because the deformation gradient would then   possibly contain NaN values.   (default: 0.95)\nmaxjacobi::Float64: Maximum value of the Jacobi determinant. If this value is exceeded,   all bonds of that point are broken.   (default: 1.03)\ncorr::Float64: Correction factor used for zero-energy mode stabilization. The   stabilization algorithm of Silling (2017) is used.   (default: 100.0)\n\nnote: Stability of fracture simulations\nThis formulation is known to be not suitable for fracture simultations without stabilization of the zero-energy modes. Therefore be careful when doing fracture simulations and try out different paremeters for maxdmg, maxjacobi, and corr.\n\nExamples\n\njulia> mat = NOSBMaterial()\nNOSBMaterial(maxdmg=0.95, maxjacobi=1.03, corr=100.0)\n\n\n\nNOSBMaterial\n\nMaterial type for the local continuum consistent (correspondence) formulation of non-ordinary state-based peridynamics.\n\nFields\n\nmaxdmg::Float64: Maximum value of damage a point is allowed to obtain. See the   constructor docs for more informations.\nmaxjacobi::Float64: Maximum value of the Jacobi determinant. See the constructor docs   for more informations.\ncorr::Float64: Correction factor used for zero-energy mode stabilization. See the   constructor docs for more informations.\n\nAllowed material parameters\n\nWhen using material! on a Body with NOSBMaterial, then the following parameters are allowed:\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nnu::Float64: Poisson's ratio\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nAllowed export fields\n\nWhen specifying the fields keyword of Job for a Body with NOSBMaterial, the following fields are allowed:\n\nposition::Matrix{Float64}: Position of each point\ndisplacement::Matrix{Float64}: Displacement of each point\nvelocity::Matrix{Float64}: Velocity of each point\nvelocity_half::Matrix{Float64}: Velocity parameter for Verlet time solver\nacceleration::Matrix{Float64}: Acceleration of each point\nb_int::Matrix{Float64}: Internal force density of each point\nb_ext::Matrix{Float64}: External force density of each point\ndamage::Vector{Float64}: Damage of each point\nn_active_bonds::Vector{Int}: Number of intact bonds of each point\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.CKIMaterial","page":"API Reference","title":"Peridynamics.CKIMaterial","text":"CKIMaterial()\n\nA material type used to assign the material of a Body with the continuum-kinematics-inspired peridynamics fomulation.\n\nExamples\n\njulia> mat = CKIMaterial()\nCKIMaterial()\n\n\n\nCKIMaterial\n\nMaterial type for the continuum-kinematics-inspired peridynamics framework.\n\nAllowed material parameters\n\nWhen using material! on a Body with CKIMaterial, then the following parameters are allowed:\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nnu::Float64: Poisson's ratio\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\nC1::Float64: One-neighbor interaction parameter (default: 0.0)\nC2::Float64: Two-neighbor interaction parameter (default: 0.0)\nC3::Float64: Two-neighbor interaction parameter (default: 0.0)\n\nwarning: Specification of interaction parameters\nIf any of the interaction parameters is used with material!, the the Young's modulus and Poisson's ratio are ignored and only the specified interaction parameters will influence the force density calculated from that interaction.If no interaction parameter is specified, then the Young's modulus and Poisson's ratio are used to calculate these parameters accordingly to Ekiz, Steinmann, and Javili (2022).\n\nAllowed export fields\n\nWhen specifying the fields keyword of Job for a Body with CKIMaterial, the following fields are allowed:\n\nposition::Matrix{Float64}: Position of each point\ndisplacement::Matrix{Float64}: Displacement of each point\nvelocity::Matrix{Float64}: Velocity of each point\nvelocity_half::Matrix{Float64}: Velocity parameter for Verlet time solver\nacceleration::Matrix{Float64}: Acceleration of each point\nb_int::Matrix{Float64}: Internal force density of each point\nb_ext::Matrix{Float64}: External force density of each point\ndamage::Vector{Float64}: Damage of each point\nn_active_one_nis::Vector{Int}: Number of intact one-neighbor interactions of each point\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#System-related-types","page":"API Reference","title":"System related types","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"NoCorrection\nEnergySurfaceCorrection","category":"page"},{"location":"api_reference/#Peridynamics.NoCorrection","page":"API Reference","title":"Peridynamics.NoCorrection","text":"NoCorrection\n\nA correction handler for materials that use the bond system. If NoCorrection is used, then no correction will be applied.\n\nSee also BBMaterial, OSBMaterial for further information on how to use the correction type.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.EnergySurfaceCorrection","page":"API Reference","title":"Peridynamics.EnergySurfaceCorrection","text":"EnergySurfaceCorrection\n\nA correction handler for materials that use the bond system. If EnergySurfaceCorrection is used, then the energy based surface correction method of Le and Bobaru (2018) is used.\n\nSee also BBMaterial, OSBMaterial for further information on how to use the correction type.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Discretization","page":"API Reference","title":"Discretization","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Body\nMultibodySetup\npoint_set!\npoint_sets\nfailure_permit!\nmaterial!\nvelocity_bc!\nvelocity_ic!\nforcedensity_bc!\nprecrack!\ncontact!\nuniform_box\nuniform_sphere\nn_points","category":"page"},{"location":"api_reference/#Peridynamics.Body","page":"API Reference","title":"Peridynamics.Body","text":"Body(material, position, volume)\nBody(material, inp_file)\n\nConstructs a Body for a peridynamics simulation.\n\nArguments\n\nmaterial::AbstractMaterial: The material which is defined for the whole body.\nposition::AbstractMatrix: A 3×n matrix with the point position of the n points.\nvolume::AbstractVector: A vector with the volume of each point.\ninp_file::AbstractString: An Abaqus input file containing meshes, imported with   read_inp.\n\nThrows\n\nErrors if the number of points is not larger than zero\nErrors if position is not a 3×n matrix and has the same length as volume\nErrors if position or volume contain NaN values\n\nExample\n\njulia> Body(BBMaterial(), rand(3, 10), rand(10))\n10-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    10-point set `all_points`\n\n\n\nwarning: Internal use only\nPlease note that the fields are intended for internal use only. They are not part of the public API of Peridynamics.jl, and thus can be altered (or removed) at any time without it being considered a breaking change.\n\nBody{Material,PointParameters}\n\nType Parameters\n\nMaterial <: AbstractMaterial: Type of the specified material model\nPointParameters <: AbstractPointParameters: Type of the point parameters\n\nFields\n\nmat::Material: The material formulation.\nn_points::Int: The number of points that in the body.\nposition::Matrix{Float64}: A 3×n_points matrix with the position of the points.\nvolume::Vector{Float64}: A vector with the volume of each point.\nfail_permit::Vector{Bool}: A vector that describes if failure is allowed for each point.\npoint_sets::Dict{Symbol,Vector{Int}}: A dictionary containing point sets.\npoint_params::Vector{PointParameters}: A vector containing all point parameters.\nparams_map::Vector{Int}: A vector that maps parameters in point_params to each point.\nsingle_dim_bcs::Vector{SingleDimBC}: A vector with boundary conditions on a single   dimension.\nposdep_single_dim_bcs::Vector{PosDepSingleDimBC}: A vector with position dependent   boundary conditions on a single dimension.\nsingle_dim_ics::Vector{SingleDimIC}: A vector with initial conditions on a single   dimension.\nposdep_single_dim_ics::Vector{PosDepSingleDimIC}: A vector with position dependent   initial conditions on a single dimension.\npoint_sets_precracks::Vector{PointSetsPreCrack}: A vector with predefined point set   cracks.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.MultibodySetup","page":"API Reference","title":"Peridynamics.MultibodySetup","text":"MultibodySetup(body_pairs...)\n\nSetup for a peridynamic simulation with multiple bodies.\n\nArguments\n\nbody_pairs::Pair{Symbol,<:AbstractBody}: Pairs of :body_name => body_object.   The name of the body has to be specified as a Symbol.\n\nThrows\n\nErrors if less than 2 bodies are defined\n\nExamples\n\njulia> sphere = Body(BBMaterial(), pos_sphere, vol_sphere)\n280-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    280-point set `all_points`\n\njulia> plate = Body(BBMaterial(), pos_plate, vol_plate)\n25600-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    25600-point set `all_points`\n\njulia> ms = MultibodySetup(:sphere => sphere, :plate => plate)\n25880-point MultibodySetup:\n  280-point Body{BBMaterial{NoCorrection}} with name `sphere`\n  25600-point Body{BBMaterial{NoCorrection}} with name `plate`\n\n\n\nwarning: Internal use only\nPlease note that the fields are intended for internal use only. They are not part of the public API of Peridynamics.jl, and thus can be altered (or removed) at any time without it being considered a breaking change.\n\nMultibodySetup{Bodies}\n\nType Parameters\n\nBodies <: Tuple: All types of the different bodies in the multibody setup.\n\nFields\n\nbodies::Bodies: A Tuple containing all the bodies.\nbody_names::Vector{Symbol}: All body names.\nbody_idxs::Dict{Symbol,Int}: A Dict to get the body index with the body name.\nsrf_contacts::Vector{ShortRangeForceContact}: All short range force contacts.\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.point_set!","page":"API Reference","title":"Peridynamics.point_set!","text":"point_set!(body, set_name, points)\npoint_set!(fun, body, set_name)\n\nAdd a point set to a Body. The points of the set can be either specified directly with the points::AbstractVector argument, or as the result of the filter function fun. By default, a body already contains a point set with the name :all_points, containg a set with all points.\n\nArguments\n\nbody::AbstractBody: Body where the set will be added.\nset_name::Symbol: Name of the point set.\npoints::AbstractVector: Some vector containing the point indices of the set.   The indices have to be in bounds with the position and volume of body.\nfun::Function: Function for filtering points. This function accepts only one positional   argument and will be used in a findall call. Depending on the argument name,   a different input will be processed:\nx: The function will receive the x-coordinate of each point in position of body:\npoints = findall(fun, @view(position[1, :]))\ny: The function will receive the y-coordinate of each point in position of body:\npoints = findall(fun, @view(position[2, :]))\nz: The function will receive the z-coordinate of each point in position of body:\npoints = findall(fun, @view(position[3, :]))\np: The function will receive the a vector containing each dimension of each point in position of body:\npoints = findall(fun, eachcol(position))\n\nThrows\n\nErrors if a point set with the same set_name already exists.\nErrors if points are not in bounds with position and volume of the body.\n\nExamples\n\nAdd a point set to body with all points that have a x-corrdinate larger than zero:\n\njulia> point_set!(x -> x > 0, body, :larger_than_zero)\n\njulia> point_sets(body)\nDict{Symbol, Vector{Int64}} with 2 entries:\n  :larger_than_zero => [6, 7, 8, 9, 10, 16, 17, 18, 19, 20  …  9…\n  :all_points       => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  991, 9…\n\nAdd a point set to body with all points that are positioned inside a sphere with radius r around the center. Note that the do-syntax can be used, as fun is the first argument of point_set!:\n\njulia> point_set!(body, :inside_sphere) do p\n           sqrt(p[1]^2 + p[2]^2 + p[3]^2) ≤ r\n       end\n\njulia> point_sets(body)\nDict{Symbol, Vector{Int64}} with 2 entries:\n  :larger_than_zero => [6, 7, 8, 9, 10, 16, 17, 18, 19, 20  …  9…\n  :inside_sphere    => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  991, 9…\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.point_sets","page":"API Reference","title":"Peridynamics.point_sets","text":"point_sets(body)\n\nReturns all point sets of body.\n\nArguments\n\nbody::AbstractBody: Body.\n\nExample\n\njulia> body = Body(BBMaterial(), rand(3,100), rand(100))\n100-point Body{BBMaterial{NoCorrection}}:\n  100-point set `all_points`\n\njulia> point_set!(body, :set_a, 1:10) # first ten points\n\njulia> Peridynamics.point_sets(body)\nDict{Symbol, Vector{Int64}} with 2 entries:\n  :all_points => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  91, 92, 93, 94, 95, 96, 97, 98, 9…\n  :set_a      => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.failure_permit!","page":"API Reference","title":"Peridynamics.failure_permit!","text":"failure_permit!(body, fail_permit)\nfailure_permit!(body, set_name, fail_permit)\n\nSet the failure permission for points of a body. By default, failure is allowed for all points. If no set_name is specified, then the permission fail_permit is set for all points of the body.\n\nArguments\n\nbody::AbstractBody: Body where the failure permission will be set.\nset_name::Symbol: The name of a point set of this body.\nfail_permit::Bool: If true, failure is allowed, and if false then no bonds of this   point are allowed to break during the simulation.\n\nThrows\n\nErrors if the body does not contain a set with set_name.\n\nExamples\n\njulia> failure_permit!(body, false)\n\njulia> body\n1000-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    1000-point set `all_points`\n  1000 points with no failure permission\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.material!","page":"API Reference","title":"Peridynamics.material!","text":"material!(body, set_name; kwargs...)\nmaterial!(body; kwargs...)\n\nAssign material point parameters to points of body. If no set_name is specified, then the parameters will be set for all points of the body.\n\nArguments\n\nbody::AbstractBody: Body.\nset_name::Symbol: The name of a point set of this body.\n\nKeywords\n\nAllowed keywords depend on the selected material model. Please look at the documentation of the material you specified when creating the body. The default material keywords are:\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nnu::Float64: Poisson's ratio\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nThrows\n\nErrors if a kwarg is not eligible for specification with the body material.\n\nExample\n\njulia> material!(body; horizon=3.0, E=2.1e5, rho=8e-6, Gc=2.7)\n\njulia> body\n1000-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    1000-point set `all_points`\n  1 point parameter(s):\n    Parameters BBMaterial: δ=3.0, E=210000.0, nu=0.25, rho=8.0e-6, Gc=2.7\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.velocity_bc!","page":"API Reference","title":"Peridynamics.velocity_bc!","text":"velocity_bc!(fun, body, set_name, dim)\n\nSpecifies velocity boundary conditions for points of the set set_name in body. The value of the boundary condition is calculated with the function fun at every time step.\n\nArguments\n\nfun::Function: Condition function for the calculation of a value, should return a   Float64. If the condition function returns a NaN, then this value is ignored, which   can be used to turn conditions off after a specified period of time. This function   accepts one ore two positional arguments and is aware of the argument names.   Possible arguments and names:\nfun(t): The function will receive the current time t at every time step.   This makes it possible to specify conditions that change over time.\nfun(p, t): This function will be processed for every point of set_name and   receives the reference position of a point as SVector{3} and the current time t   at every time step. This makes it possible to specify conditions that   also depend on the position of a point.\nbody::AbstractBody: Body the condition is specified on.\nset_name::Symbol: The name of a point set of this body.\ndim::Union{Integer,Symbol}: Direction of the condition, either specified as Symbol or   integer.\nx-direction: :x or 1\ny-direction: :y or 2\nz-direction: :z or 3\n\nThrows\n\nErrors if the body does not contain a set with set_name.\nErrors if the direction is not correctly specified.\nErrors if function is not suitable as condition function and has the wrong arguments.\n\nExample\n\njulia> velocity_bc!(t -> 2.0, body, :all_points, 1)\n\njulia> velocity_bc!((p,t) -> p[1] * t, body, :all_points, :y)\n\njulia> velocity_bc!(t -> t > 0.00001 ? 1.0 : NaN, body, :all_points, :z)\n\njulia> body\n1000-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    1000-point set `all_points`\n  3 boundary condition(s):\n    BC on velocity: point_set=all_points, dim=1\n    BC on velocity: point_set=all_points, dim=3\n    Pos.-dep. BC on velocity: point_set=all_points, dim=2\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.velocity_ic!","page":"API Reference","title":"Peridynamics.velocity_ic!","text":"velocity_ic!(body, set_name, dim, value)\nvelocity_ic!(fun, body, set_name, dim)\n\nSpecifies velocity initial conditions for points of the set set_name in body. The value of the initial condition is specified before time integration. If a function fun is specified, then the value is with that function.\n\nArguments\n\nbody::AbstractBody: Body the condition is specified on.\nset_name::Symbol: The name of a point set of this body.\ndim::Union{Integer,Symbol}: Direction of the condition, either specified as Symbol or   integer.\nx-direction: :x or 1\ny-direction: :y or 2\nz-direction: :z or 3\nvalue::Real: Value that is specified before time integration.\nfun::Function: Condition function for the calculation of a value, should return a   Float64. If the condition function returns a NaN, then this value is ignored, which   can be used to turn off the condition for a specified position. This function   accepts one ore two positional arguments and is aware of the argument names.   Possible arguments and names:\nfun(p): The function will receive the reference position p of a point as   SVector{3}.\n\nThrows\n\nErrors if the body does not contain a set with set_name.\nErrors if the direction is not correctly specified.\nErrors if function is not suitable as condition function and has the wrong arguments.\n\nExample\n\njulia> velocity_ic!(body, :all_points, :x, -100.0)\n\njulia> body\n1000-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    1000-point set `all_points`\n  1 initial condition(s):\n    IC on velocity: point_set=all_points, dim=1\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.forcedensity_bc!","page":"API Reference","title":"Peridynamics.forcedensity_bc!","text":"forcedensity_bc!(fun, body, set, dim)\n\nSpecifies force density boundary conditions for points of the set set_name in body. The value of the boundary condition is calculated with the function fun at every time step.\n\nArguments\n\nfun::Function: Condition function for the calculation of a value, should return a   Float64. If the condition function returns a NaN, then this value is ignored, which   can be used to turn conditions off after a specified period of time. This function   accepts one ore two positional arguments and is aware of the argument names.   Possible arguments and names:\nfun(t): The function will receive the current time t at every time step.   This makes it possible to specify conditions that change over time.\nfun(p, t): This function will be processed for every point of set_name and   receives the reference position of a point as SVector{3} and the current time t   at every time step. This makes it possible to specify conditions that   also depend on the position of a point.\nbody::AbstractBody: Body the condition is specified on.\nset_name::Symbol: The name of a point set of this body.\ndim::Union{Integer,Symbol}: Direction of the condition, either specified as Symbol or   integer.\nx-direction: :x or 1\ny-direction: :y or 2\nz-direction: :z or 3\n\nThrows\n\nErrors if the body does not contain a set with set_name.\nErrors if the direction is not correctly specified.\nErrors if function is not suitable as condition function and has the wrong arguments.\n\nExample\n\njulia> forcedensity_bc!(t -> 8000.0, body, :all_points, :x)\n\njulia> forcedensity_bc!((p,t) -> p[1] * t, body, :all_points, :y)\n\njulia> forcedensity_bc!(t -> t > 0.00001 ? 8000.0 : NaN, body, :all_points, :z)\n\njulia> body\n1000-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    1000-point set `all_points`\n  3 boundary condition(s):\n    BC on force density: point_set=all_points, dim=1\n    BC on force density: point_set=all_points, dim=3\n    Pos.-dep. BC on force density: point_set=all_points, dim=2\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.precrack!","page":"API Reference","title":"Peridynamics.precrack!","text":"precrack!(body, set_a, set_b; update_dmg=true)\n\nCreates a crack between two point sets by prohibiting interaction between points of different point sets. The points in set_a are not allowed to interact with points in set_b.\n\nArguments\n\nbody::AbstractBody: Body.\nset_a::Symbol: The name of a point set of this body.\nset_b::Symbol: The name of a point set of this body.\n\nKeywords\n\nupdate_dmg::Bool: If true, the material points involved in the predefined crack are   initially damaged. If false, the bonds involved are deleted and the material points   involved with the predefined crack are not damaged in the reference results.   (default: true)\n\nThrows\n\nErrors if the body does not contain sets with name set_a and set_b.\nErrors if the point sets intersect and a point is included in both sets.\n\nExample\n\njulia> point_set!(body, :a, 1:2)\n\njulia> point_set!(body, :b, 3:4)\n\njulia> precrack!(body, :a, :b)\n\njulia> body\n1000-point Body{BBMaterial{NoCorrection}}:\n  3 point set(s):\n    1000-point set `all_points`\n    2-point set `a`\n    2-point set `b`\n  1 predefined crack(s)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.contact!","page":"API Reference","title":"Peridynamics.contact!","text":"contact!(multibody_setup, name_body_a, name_body_b; kwargs...)\n\nDefines a short range force contact between body name_body_a and name_body_b in the MultibodySetup multibody_setup.\n\nArguments\n\nmultibody_setup::MultibodySetup: MultibodySetup.\nname_body_a::Symbol: The name of a body in this multibody setup.\nname_body_b::Symbol: The name of a body in this multibody setup.\n\nKeywords\n\nradius::Float64: Contact search radius. If a the distance of a point in body   name_body_a and a point in body name_body_b is lower than this radius, a contact   force is calculated. This radius should be in the order of the point spacing of a   point cloud.\npenalty_factor::Float64: Penalty factor for the short range force contact algorithm.   (default: 1e12)\n\nThrows\n\nErrors if multibody_setup does not contain bodies with name name_body_a and   name_body_b.\nErrors if the keyword radius is not specified or radius ≤ 0.\nErrors if penalty_factor ≤ 0.\n\nExamples\n\njulia> ms = MultibodySetup(:a => body_a, :b => body_b)\n2000-point MultibodySetup:\n  1000-point Body{BBMaterial{NoCorrection}} with name `b`\n  1000-point Body{BBMaterial{NoCorrection}} with name `b`\n\njulia> contact!(ms, :a, :b; radius=0.001)\n\njulia> ms\n2000-point MultibodySetup:\n  1000-point Body{BBMaterial{NoCorrection}} with name `b`\n  1000-point Body{BBMaterial{NoCorrection}} with name `b`\n  2 short range force contact(s)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.uniform_box","page":"API Reference","title":"Peridynamics.uniform_box","text":"uniform_box(lx, ly, lz, ΔX0; kwargs...)\n\nCreates a grid of uniformly distributed points in a cuboid with lengths lx, ly and lz and point spacing ΔX0.\n\nArguments\n\nlx::Real: Length in x-dimension.\nly::Real: Length in y-dimension.\nlz::Real: Length in z-dimension.\nΔX0::Real: The point spacing of the points.\n\nKeywords\n\ncenter_x::Real: Center of the cuboid in x-direction. (default: 0)\ncenter_y::Real: Center of the cuboid in y-direction. (default: 0)\ncenter_z::Real: Center of the cuboid in z-direction. (default: 0)\n\nReturns\n\nposition::Matrix{Float64}: A 3×n_points matrix with the position of the points.\nvolume::Vector{Float64}: A vector with the volume of each point.\n\nExamples\n\njulia> position, volume = uniform_box(10, 10, 10, 2);\n\njulia> position\n3×125 Matrix{Float64}:\n -4.0  -2.0   0.0   2.0   4.0  -4.0  -2.0  …  0.0  2.0  4.0  -4.0  -2.0  0.0  2.0  4.0\n -4.0  -4.0  -4.0  -4.0  -4.0  -2.0  -2.0     2.0  2.0  2.0   4.0   4.0  4.0  4.0  4.0\n -4.0  -4.0  -4.0  -4.0  -4.0  -4.0  -4.0     4.0  4.0  4.0   4.0   4.0  4.0  4.0  4.0\n\njulia> volume\n125-element Vector{Int64}:\n 8\n 8\n 8\n 8\n ⋮\n 8\n 8\n 8\n 8\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.uniform_sphere","page":"API Reference","title":"Peridynamics.uniform_sphere","text":"uniform_sphere(diameter, ΔX0; kwargs...)\n\nCreates a grid of uniformly distributed points in a sphere with a specific diameter and the point spacing ΔX0.\n\nArguments\n\ndiameter::Real: Diameter of the sphere.\nΔX0::Real: The point spacing of the points.\n\nKeywords\n\ncenter_x::Real: Center of the cuboid in x-direction. (default: 0)\ncenter_y::Real: Center of the cuboid in y-direction. (default: 0)\ncenter_z::Real: Center of the cuboid in z-direction. (default: 0)\n\nReturns\n\nposition::Matrix{Float64}: A 3×n_points matrix with the position of the points.\nvolume::Vector{Float64}: A vector with the volume of each point.\n\nExamples\n\njulia> position, volume = uniform_sphere(10, 2);\n\njulia> position\n3×81 Matrix{Float64}:\n -2.0   0.0   2.0  -2.0   0.0   2.0  -2.0  …   0.0   2.0  -2.0  0.0  2.0  -2.0  0.0  2.0\n -2.0  -2.0  -2.0   0.0   0.0   0.0   2.0     -2.0  -2.0   0.0  0.0  0.0   2.0  2.0  2.0\n -4.0  -4.0  -4.0  -4.0  -4.0  -4.0  -4.0      4.0   4.0   4.0  4.0  4.0   4.0  4.0  4.0\n\njulia> volume\n81-element Vector{Int64}:\n 8\n 8\n 8\n 8\n 8\n ⋮\n 8\n 8\n 8\n 8\n 8\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.n_points","page":"API Reference","title":"Peridynamics.n_points","text":"n_points(body)\n\nReturns the total number of points in a body.\n\nArguments\n\nbody::Body: Body.\n\nReturns\n\nn_points::Int: The number of points in the body.\n\nExamples\n\njulia> body = Body(BBMaterial(), pos, vol)\n1000-point Body{BBMaterial{NoCorrection}}:\n  1 point set(s):\n    1000-point set `all_points`\n\njulia> n_points(body)\n1000\n\n\n\nn_points(multibody_setup)\n\nReturns the total number of points in a multibody setup.\n\nArguments\n\nmultibody_setup::MultibodySetup: MultibodySetup.\n\nReturns\n\nn_points::Int: The sum of all points from all bodies in the multibody setup.\n\nExamples\n\njulia> ms = MultibodySetup(:a => body_a, :b => body_b)\n2000-point MultibodySetup:\n  1000-point Body{BBMaterial{NoCorrection}} with name `a`\n  1000-point Body{BBMaterial{NoCorrection}} with name `b`\n\njulia> n_points(ms)\n2000\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Preprocessing-and-simulation-setup","page":"API Reference","title":"Preprocessing & simulation setup","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"read_inp\nmpi_isroot\nforce_mpi_run!\nforce_threads_run!\nenable_mpi_timers!\ndisable_mpi_timers!\nenable_mpi_progress_bars!\nreset_mpi_progress_bars!\n@mpitime\n@mpiroot","category":"page"},{"location":"api_reference/#Peridynamics.AbaqusMeshConverter.read_inp","page":"API Reference","title":"Peridynamics.AbaqusMeshConverter.read_inp","text":"read_inp(file::String)\n\nRead Abaqus .inp-file and convert meshes to a point cloud with the help of the AbaqusReader.jl package. Every element is converted to a point. The center of the element becomes the position of the point and the element volume becomes the point volume. Element sets defined in Abaqus are converted to corresponding point sets.\n\nCurrently supported mesh elements: [:Tet4, :Hex8]\n\nArguments\n\nfile::String: Path to Abaqus .inp-file\n\nReturns\n\nposition::Matrix{Float64}: Point position (midpoint of every element)\nvolume::Vector{Float64}: Point volume (volume of every element)\npoint_sets: Element sets defined in the .inp-file\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.mpi_isroot","page":"API Reference","title":"Peridynamics.mpi_isroot","text":"mpi_isroot()\n\nHelper function that returns a bool indicating if a process is the MPI root process. It can be safely used even for multithreading simulations, as it is always true if the package is started in a normal Julia environment which is not started by MPI.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.force_mpi_run!","page":"API Reference","title":"Peridynamics.force_mpi_run!","text":"force_mpi_run!()\n\nHelper function to force the usage of the MPI backend. After this function is called, all following simulations will use MPI.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.force_threads_run!","page":"API Reference","title":"Peridynamics.force_threads_run!","text":"force_threads_run!()\n\nHelper function to force the usage of the multithreading backend. After this function is called, all following simulations will use multithreading.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.enable_mpi_timers!","page":"API Reference","title":"Peridynamics.enable_mpi_timers!","text":"enable_mpi_timers!()\n\nHelper function to enable timers defined with the TimerOutputs for simulations with the MPI backend. The results of the timers then will be exported into the specified path of a Job. By default, not timers will be used with MPI simulations. It can be safely used with multithreading.\n\nSee also disable_mpi_timers!.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.disable_mpi_timers!","page":"API Reference","title":"Peridynamics.disable_mpi_timers!","text":"disable_mpi_timers!()\n\nHelper function to disable timers defined with the TimerOutputs for simulations with the MPI backend. It is mainly used to reset the behaviour after a call of enable_mpi_timers!. It can be safely used with multithreading.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.enable_mpi_progress_bars!","page":"API Reference","title":"Peridynamics.enable_mpi_progress_bars!","text":"enable_mpi_progress_bars!()\n\nHelper function to enable progress bars with MPI simulations on a personal computer. After this function is called, progress bars are beeing shown with MPI simulations like with multithreading simulations. This behavior can be reset to default with reset_mpi_progress_bars!.\n\nwarning: Progress bars and output files\nProgress bars are by default disabled with MPI simulations, because they can really mess up with the output files produced by a HPC system. Therefore, a warning is shown as a reminder to reset this behaviour before submitting a job to a cluster!\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.reset_mpi_progress_bars!","page":"API Reference","title":"Peridynamics.reset_mpi_progress_bars!","text":"reset_mpi_progress_bars!()\n\nAfter this function is called, progress bars are again disabled on MPI simulations (standard setting). This will reset the behavior after a call of enable_mpi_progress_bars!.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.@mpitime","page":"API Reference","title":"Peridynamics.@mpitime","text":"@mpitime expression\n\nTime the expression if the mpi rank is zero. Lowers to:\n\nif mpi_isroot()\n    @time expression\nelse\n    expression\nend\n\nSee also: mpi_isroot.\n\n\n\n\n\n","category":"macro"},{"location":"api_reference/#Peridynamics.@mpiroot","page":"API Reference","title":"Peridynamics.@mpiroot","text":"@mpiroot [option] expression\n\nRun the code if the mpi rank is zero. Lowers to something similar as:\n\nif mpi_isroot()\n    expression\nend\n\nOptions\n\n:wait: All MPI ranks will wait until the root rank finishes evaluating expression.\n\nSee also: mpi_isroot.\n\n\n\n\n\n","category":"macro"},{"location":"api_reference/#Solving","page":"API Reference","title":"Solving","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"VelocityVerlet\nDynamicRelaxation\nJob\nsubmit","category":"page"},{"location":"api_reference/#Peridynamics.VelocityVerlet","page":"API Reference","title":"Peridynamics.VelocityVerlet","text":"VelocityVerlet(; kwargs...)\n\nTime integration solver for the Velocity Verlet algorithm. Specify either the number of steps or the time the simulation should cover.\n\nKeywords\n\ntime::Real: The total time the simulation will cover. If this keyword is specified, the   keyword steps is no longer allowed. (optional)\nsteps::Int: Number of calculated time steps. If this keyword is specified, the keyword   time is no longer allowed. (optional)\nstepsize::Real: Manually specify the size of the time step. (optional)\nsafety_factor::Real: Safety factor for step size to ensure stability. (default: 0.7)\n\nwarning: Specification of the time step\nKeep in mind that manually specifying the critical time step is dangerous! If the specified time step is too high and the CFL condition no longer holds, the simulation will give wrong results and maybe crash!\n\nThrows\n\nErrors if both time and steps are specified as keywords.\nErrors if neither time nor steps are specified as keywords.\nErrors if safety_factor < 0 or safety_factor > 1.\n\nExample\n\njulia> VelocityVerlet(steps=2000)\nVelocityVerlet:\n  n_steps        2000\n  safety_factor  0.7\n\njulia> VelocityVerlet(time=0.001)\nVelocityVerlet:\n  end_time       0.001\n  safety_factor  0.7\n\njulia> VelocityVerlet(steps=2000, stepsize=0.0001)\n┌ Warning: stepsize specified! Please be sure that the CFD-condition holds!\n└ @ Peridynamics ~/Code/Peridynamics.jl/src/time_solvers/velocity_verlet.jl:66\nVelocityVerlet:\n  n_steps        2000\n  Δt             0.0001\n  safety_factor  0.7\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.DynamicRelaxation","page":"API Reference","title":"Peridynamics.DynamicRelaxation","text":"DynamicRelaxation(; kwargs...)\n\nTime integration solver for the adaptive dynamic relaxation algorithm used for quasi-static simulations.\n\nKeywords\n\nsteps::Int: Number of calculated time steps. If this keyword is specified, the keyword   time is no longer allowed.\nstepsize::Real: Manually specify the size of the time step. (default: 1.0)\ndamping_factor::Real: Damping factor to increase the value in the mass matrix.   (default: 1.0)\n\nThrows\n\nErrors if steps < 0.\nErrors if stepsize < 0.\nErrors if damping_factor < 0.\n\nExample\n\njulia> DynamicRelaxation(steps=1000)\nDynamicRelaxation:\n  n_steps  1000\n  Δt       1\n  Λ        1\n\njulia> DynamicRelaxation(steps=1000, damping_factor=2)\nDynamicRelaxation:\n  n_steps  1000\n  Δt       1\n  Λ        2\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.Job","page":"API Reference","title":"Peridynamics.Job","text":"Job(spatial_setup, time_solver; kwargs...)\n\nA type that contains all the information necessary for a peridynamic simulation. You can submit a Job to start the simulation.\n\nArguments\n\nspatial_setup: A Body or MultibodySetup.\ntime_solver: VelocityVerlet or DynamicRelaxation.\n\nKeywords\n\npath::String: Path to store results. If it does not exist yet it will be created during   the simulation. (optional)\nfreq::Int: Output frequency of result files. A output file will be written every   freq-th time step. (default: 10)\nfields: Fields that should be exported to output files. Allowed keywords depend on the   selected material model. Please look at the documentation of the material you specified   when creating the body. (default: (:displacement, :damage))\nIf spatial_setup is a Body, the fields keyword can be of the form:\nfields::Symbol: A symbol specifying a single output field.\nfields::NTuple{N,Symbol} where N: A Tuple specifying multiple output fields.\nfields::Vector{Symbol}: A Vector specifying multiple output fields.\nIf spatial_setup is a MultibodySetup, the fields keyword can also be specified   for every body separately:\nfields::Dict{Symbol,T}: A Dictionary containing the fields separately for every   body. T is here every possible type of the fields keyword that can be used for a   single body.\n\nnote: No file export\nIf no keyword is specified when creating a Job, then no files will be exported.\n\nExample\n\njulia> job = Job(multibody_setup, verlet_solver; path=\"my_results/sim1\")\nJob:\n  spatial_setup  25880-point MultibodySetup\n  time_solver    VelocityVerlet(n_steps=2000, safety_factor=0.7)\n  options        export_allowed=true, freq=10\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#Peridynamics.submit","page":"API Reference","title":"Peridynamics.submit","text":"submit(job::Job; quiet=false)\n\nRun the simulation by submitting the job.\n\nArguments\n\njob::Job: Job that contains all defined parameters and conditions.\n\nKeywords\n\nquiet::Bool: If true, no outputs are printed in the terminal. (default: false)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Postprocessing","page":"API Reference","title":"Postprocessing","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"read_vtk\nprocess_each_export","category":"page"},{"location":"api_reference/#Peridynamics.VtkReader.read_vtk","page":"API Reference","title":"Peridynamics.VtkReader.read_vtk","text":"read_vtk(file::AbstractString)\n\nRead vtu or pvtu file containing simulation results of a time step.\n\nArguments\n\nfile::String: Path to VTK file in vtu or pvtu format\n\nReturns\n\nDict{String, VecOrMat{Float64}}: Simulation results as a dictionary\n\nExamples\n\njulia> read_vtk(\"results/fragmenting_cylinder/vtk/timestep_000520.pvtu\")\nDict{Symbol, VecOrMat{Float64}} with 4 entries:\n  :position     => [0.0263309 0.027315 … 0.0293543 0.030339; 0.000292969 0.000294475…\n  :displacement => [0.00583334 0.00581883 … 0.00585909 0.00584271; -0.000162852 -0.0…\n  :damage       => [0.616071, 0.569343, 0.528571, 0.463415, 0.438776, 0.553571, 0.56…\n  :time         => [9.69363e-5]\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#Peridynamics.process_each_export","page":"API Reference","title":"Peridynamics.process_each_export","text":"process_each_export(f, vtk_path; kwargs...)\nprocess_each_export(f, job; kwargs...)\n\nA function for postprocessing every exported file. This function works with multithreading and MPI and determines the backend exactly like the submit function.\n\nArguments\n\nf::Function: The processing function with signature f(r0, r, id).\nr0: The results of read_vtk for the exported file of the reference   results.\nr: The results of read_vtk for a time step.\nid::Ind: An ID indicating the number of the exported file (counted from 1, starting   with the reference file).\nvtk_path::AbstractString: A path that should contain the export results of a simulation.\njob::Job: A job object. The path of the VTK files will then be processed from the   job options.\n\nKeywords\n\nserial::Bool: If true, all results will be processed in the correct order of the time   steps and on a single thread, cf. the MPI root rank.\n\n\n\n\n\n","category":"function"},{"location":"expl_bondbased/#expl_bb","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"","category":"section"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"The initial version of peridynamics is the bond-based (BB) formulation. [Sil00]","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"Here, a pairwise force function boldsymbolf is defined and calculated for each bond of two material points, which depends on the strain of the bond and is aligned in its direction: ","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":" boldsymbolf = c  varepsilon^ij  boldsymboln  ","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"Here the micro-modulus constant [SA05]","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"c = frac18  kappapi  delta^4 ","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"and the strain of the bond [SB05]","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"varepsilon^ij = fracl^ij-L^ijL^ij","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"with bond lengths L^ij =leftboldsymbolDelta X^ijright and l^ij =leftboldsymbolDelta x^ijright are used.","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"The direction vector","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"boldsymboln = fracboldsymbolDelta x^ijl^ij","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"is oriented in the direction of the bond. ","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"To get the resulting body forces, now the force function is integrated over the whole body:","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"boldsymbolb^mathrminti = boldsymbolb^mathrmint (boldsymbolX ^ i  t) = int_mathcalH_i boldsymbolf  mathrmdV^j  ","category":"page"},{"location":"expl_bondbased/","page":"Bond-based peridynamics","title":"Bond-based peridynamics","text":"Size Symbol Unit\nPairwise force function boldsymbolf leftfracmathrmkgmathrmm^5mathrms^2right\nMicro-modulus constant [SA05] c leftfracmathrmkgmathrmm^5mathrms^2right\nBond strain varepsilon^ij -\nBond in mathcalB_0 boldsymbolDelta X^ij mathrmm\nBond in mathcalB_t boldsymbolDelta x^ij mathrmm\nBond length in mathcalB_0 L^ij mathrmm\nBond length in mathcalB_t l^ij mathrmm\nDirection vector boldsymboln -\nVolume of point j V^j leftmathrmm^3right\nInternal force density boldsymbolb^mathrminti leftfracmathrmkgmathrmm^2mathrms^2right","category":"page"},{"location":"howto_mpi/#Simulations-with-MPI","page":"Simulations with MPI","title":"Simulations with MPI","text":"","category":"section"},{"location":"howto_mpi/","page":"Simulations with MPI","title":"Simulations with MPI","text":"The package is designed so that the same core functions are used and only a small backend handles the differences between MPI or multithreading. This means, the development goal was:","category":"page"},{"location":"howto_mpi/","page":"Simulations with MPI","title":"Simulations with MPI","text":"Code that runs with multithreading should also work with MPI without changes!","category":"page"},{"location":"howto_mpi/","page":"Simulations with MPI","title":"Simulations with MPI","text":"However, currently not all features are supported with MPI. A table with an overview is shown below.","category":"page"},{"location":"howto_mpi/#Currently-supported-features:","page":"Simulations with MPI","title":"Currently supported features:","text":"","category":"section"},{"location":"howto_mpi/","page":"Simulations with MPI","title":"Simulations with MPI","text":"Job type MPI\nJob(::Body, ::VelocityVerlet) ✅\nJob(::Body, ::DynamicRelaxation) ✅\nJob(::MultibodySetup, ::VelocityVerlet) ❌","category":"page"},{"location":"howto_mpi/#Setting-up-simulations-for-MPI","page":"Simulations with MPI","title":"Setting up simulations for MPI","text":"","category":"section"},{"location":"howto_mpi/","page":"Simulations with MPI","title":"Simulations with MPI","text":"If a script containing a simulation runs with multithreading and the features are supported with MPI, then this same script can be run with:","category":"page"},{"location":"howto_mpi/","page":"Simulations with MPI","title":"Simulations with MPI","text":"mpiexecjl -n <number of ranks> julia --project path/to/script.jl","category":"page"},{"location":"howto_mpi/","page":"Simulations with MPI","title":"Simulations with MPI","text":"Please refer to the MPI.jl documentation of mpiexecjl for installation and setup instructions.","category":"page"},{"location":"howto_mpi/","page":"Simulations with MPI","title":"Simulations with MPI","text":"Furthermore, there are helper functions that improve the setup of MPI simulations, such as enable_mpi_timers!, @mpiroot, @mpitime, or mpi_isroot.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"EditURL = \"../literate/tutorial_cylinder.jl\"","category":"page"},{"location":"generated/tutorial_cylinder/#tutorial_cylinder","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"","category":"section"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"A cylinder fragmenting into many pieces, inspired by the  peridigm example.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"We use the point cloud created by peridigm for their corresponding example. You can download the file containing the data from this page on their repository.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"To start, import the package:","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"First a function is written that can read our .txt-file containing the data of the point cloud and convert it into the position and volume, which we need to define our Body. For this we need the package DelimitedFiles.jl.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"using DelimitedFiles\nfunction fragmenting_cylinder_geometry(input_mesh_file::AbstractString)\n    input_raw = readdlm(input_mesh_file)\n    position = copy(input_raw[:, 1:3]')\n    volume = copy(input_raw[:, 5])\n    return position, volume\nend","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"Now we specify the storage path of the file.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"input_mesh_file = joinpath(@__DIR__, \"..\", \"assets\", \"fragmenting_cylinder.txt\")","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"To get the information we need, we use our function defined above.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"position, volume = fragmenting_cylinder_geometry(input_mesh_file)","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"Using this data, we can create a Body which represents the cylinder.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"body = Body(BBMaterial(), position, volume)","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"We specify the material parameters of the cylinder.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"material!(body, horizon=0.00417462, rho=7800, E=195e9, epsilon_c=0.02)","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"Then some initial velocity conditions in x-, y- and z-direction are employed to provoke the fracture of the cylinder.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"velocity_ic!(p -> (200-50*((p[3]/0.05)-1)^2)*cos(atan(p[2],p[1])), body, :all_points, :x)\nvelocity_ic!(p -> (200-50*((p[3]/0.05)-1)^2)*sin(atan(p[2],p[1])), body, :all_points, :y)\nvelocity_ic!(p -> 100*((p[3]/0.05)-1), body, :all_points, :z)","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"We employ the Velocity Verlet algorithm for a total time span of 2.5e-4 seconds.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"vv = VelocityVerlet(time=2.5e-4)","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"Finally the job is created","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"job = Job(body, vv; path=\"results/fragmenting_cylinder\", freq=10)","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"and subsequently submitted.","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"submit(job)","category":"page"},{"location":"generated/tutorial_cylinder/","page":"Fragmenting Cylinder","title":"Fragmenting Cylinder","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\">\n  <img src=\"assets/logo.png\" width=\"300\" />\n  <br>\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/817c7bd4-9c02-4cc4-ac66-998c0f5e95e2\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/70c24007-5aa9-460f-9a97-c67b1df32750\">\n    <img alt=\"The Peridynamics.jl logo\" src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/70c24007-5aa9-460f-9a97-c67b1df32750\" width=\"400\">\n  </picture>\n</p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"A high-level Julia package for parallel peridynamics simulations","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Peridynamics.jl, follow these steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install Julia from the official Julia website if you haven't already.\nLaunch Julia and open the Julia REPL.\nEnter the package manager by pressing ] in the REPL.\nIn the package manager, type:\nadd Peridynamics\nPress Backspace or Ctrl + C to exit the package manager.","category":"page"},{"location":"#How-to-guides","page":"Home","title":"How-to guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simulations with MPI\nVisualize results with ParaView","category":"page"},{"location":"#Tutorials","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-grid\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\">\n   <a href=\"https://kaipartmann.github.io/Peridynamics.jl/stable/generated/tutorial_tension_static/\">\n      <figcaption>Tensile test quasi-static</figcaption><br><img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/ac69d8aa-526d-436a-aa0c-820a1f42bcca\" style=\"width: 90% !important;\"/>\n   </a>\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\">\n   <a href=\"https://kaipartmann.github.io/Peridynamics.jl/stable/generated/tutorial_tension_dynfrac/\">\n      <figcaption>Tensile test dynamic</figcaption><br><img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/dda2b7b3-d44b-41a9-b133-6d1b548df1c1\" style=\"width: 90% !important;\"/>\n   </a>\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\">\n   <a href=\"https://kaipartmann.github.io/Peridynamics.jl/stable/generated/tutorial_tension_precrack/\">\n      <figcaption>Tension with predefined crack</figcaption><br><img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/9f627d2d-44b5-43a3-94cd-9d34894fd142\" style=\"width: 90% !important;\"/>\n   </a>\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\">\n   <a href=\"https://kaipartmann.github.io/Peridynamics.jl/stable/generated/tutorial_logo/\">\n      <figcaption>The old logo</figcaption><br><img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/5439e112-9088-49a3-bb01-aff541adc0f8\" style=\"width: 90% !important;\"/>\n   </a>\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\">\n   <a href=\"https://kaipartmann.github.io/Peridynamics.jl/stable/generated/tutorial_kalthoff-winkler_dynfrac/\">\n      <figcaption>Kalthoff Winkler</figcaption><br><img src=\"https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/6dc362ef-4997-4327-9bc1-41350fac2dc1\" style=\"width: 90% !important;\"/>\n   </a>\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\">\n   <a href=\"https://kaipartmann.github.io/Peridynamics.jl/stable/generated/tutorial_cylinder/\">\n      <figcaption>Fragmenting cylinder</figcaption><br><img src=\"https://github.com/user-attachments/assets/58e11123-6143-4e13-8642-7e30c9e6c86d\" style=\"width: 90% !important;\"/>\n   </a>\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"</div>","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<ul>\n<li><a href=\"https://orcid.org/0000-0002-5238-4355\">Kai Partmann (University of Siegen) <img alt=\"ORCID logo\" src=\"https://info.orcid.org/wp-content/uploads/2019/11/orcid_16x16.png\" width=\"16\" height=\"16\" /></a></li>\n<li><a href=\"https://orcid.org/0009-0004-9195-0112\">Manuel Dienst (University of Siegen) <img alt=\"ORCID logo\" src=\"https://info.orcid.org/wp-content/uploads/2019/11/orcid_16x16.png\" width=\"16\" height=\"16\" /></a></li>\n<li><a href=\"https://orcid.org/0000-0002-2213-8401\">Kerstin Weinberg (University of Siegen) <img alt=\"ORCID logo\" src=\"https://info.orcid.org/wp-content/uploads/2019/11/orcid_16x16.png\" width=\"16\" height=\"16\" /></a></li>\n</ul>","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/0d14a65b-4e05-4408-8107-59ac9c1477d2 width=500>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The authors gratefully acknowledge the support of the Deutsche Forschungsgemeinschaft (DFG) under the project WE2525-14/1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The support of Carsten Bauer and Xin Wu from PC2 with the design of the internal structure regarding parallel performance is gratefully acknowledged.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The authors gratefully acknowledge the computing time provided to them on the high-performance computer Noctua 2 at the NHR Center PC2. These are funded by the Federal Ministry of Education and Research and the state governments participating on the basis of the resolutions of the GWK for the national highperformance computing at universities (www.nhr-verein.de/unsere-partner).","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"EditURL = \"../literate/tutorial_wave_in_bar.jl\"","category":"page"},{"location":"generated/tutorial_wave_in_bar/#Wave-propagation-in-a-thin-bar","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"","category":"section"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"In this tutorial, a cuboid bar is created. A velocity pulse in the form of one period of a sine wave is applied to create a pressure wave that propagates through the bar.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"First import the Peridynamics.jl package:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"To get started, some parameters used to for this simulation are defined. These are the length of the bar lx, the width and height lyz and the number of points in the width npyz.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"lx = 0.2\nlyz = 0.002\nnpyz = 4","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"With these parameters the point spacing can be calculated:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"Δx = lyz / npyz","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"A cuboid body according to the ordinary state-based model with the specified dimensions and point spacing is then created:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"pos, vol = uniform_box(lx, lyz, lyz, Δx)\nbody = Body(OSBMaterial(), pos, vol)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"Failure is prohibited throughout the body:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"failure_permit!(body, false)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"Following material parameters are specified:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"material parameter value\nHorizon $ δ $ 3015 cdot Δx\nDensity ρ $ 7850\\,\\mathrm{kg}\\,\\mathrm{m}^{-3}$\nYoung's modulus E $ 210 \\, \\mathrm{GPa}$\nPoisson's ratio ν 025\ncritical strain ε_c 001","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"material!(body, horizon=3.015Δx, rho=7850.0, E=210e9, nu=0.25, epsilon_c=0.01)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"Point set :left including the first row of points in x-direction is created:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"point_set!(x -> x < -lx / 2 + 1.2Δx, body, :left)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"The velocity boundary condition of the form","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"    v_x (t) =\n    begincases\n        v_mathrmmax cdot sin(2pi cdot fractT) qquad\n         forall  0 leq t leq T \n        0 textelse\n    endcases","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"is applied to point set :left. The parameters used for this excitation are period length T and amplitude vmax.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"T, vmax = 1.0e-5, 2.0\nvelocity_bc!(t -> t < T ? vmax * sin(2π / T * t) : 0.0, body, :left, :x)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"The Velocity Verlet algorithm is used as time integration method and 2000 time steps are calculated:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"vv = VelocityVerlet(steps=2000)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"The job is now defined with the specified settings and parameters.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"job = Job(body, vv; path=\"results/xwave\")","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"The last step is submitting the job to start the simulation.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Wave propagation in a thin bar","title":"Wave propagation in a thin bar","text":"submit(job);","category":"page"}]
}
