var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"S. Silling. Reformulation of elasticity theory for discontinuities and long-range forces. Journal of the Mechanics and Physics of Solids 48, 175–209 (2000).\n\n\n\nS. Silling and E. Askari. A meshfree method based on the peridynamic model of solid mechanics. Computers & Structures 83, 1526–1535 (2005).\n\n\n\nS. Silling and F. Bobaru. Peridynamic modeling of membranes and fibers. International Journal of Non-Linear Mechanics 40, 395–409 (2005). Special Issue in Honour of C.O. Horgan.\n\n\n\nS. Silling, M. Epton, O. Weckner, J. Xu and E. Askari. Peridynamic States and Constitutive Modeling. Journal of Elasticity 88, 151–184 (2007).\n\n\n\nA. Javili, A. McBride and P. Steinmann. Continuum-kinematics-inspired peridynamics. Mechanical problems. Journal of the Mechanics and Physics of Solids 131 (2019).\n\n\n\n","category":"page"},{"location":"api_public/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"api_public/","page":"Public API","title":"Public API","text":"Here, all exported types and methods are listed, which the user needs when using the package.","category":"page"},{"location":"api_public/","page":"Public API","title":"Public API","text":"","category":"page"},{"location":"api_public/","page":"Public API","title":"Public API","text":"Pages = [\"api_public.md\"]","category":"page"},{"location":"api_public/#Types","page":"Public API","title":"Types","text":"","category":"section"},{"location":"api_public/","page":"Public API","title":"Public API","text":"BBMaterial\nOSBMaterial\nNOSBMaterial\nCKIMaterial\nBody\nMultibodySetup\nVelocityVerlet\nJob","category":"page"},{"location":"api_public/#Peridynamics.BBMaterial","page":"Public API","title":"Peridynamics.BBMaterial","text":"BBMaterial <: AbstractMaterial\n\nMaterial type for bond-based peridynamic simulations\n\nAllowed material parameters\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nAllowed export fields\n\nposition::Matrix{Float64}: Position of each point\ndisplacement::Matrix{Float64}: Displacement of each point\nvelocity::Matrix{Float64}: Velocity of each point\nvelocity_half::Matrix{Float64}: Velocity parameter for Verlet time solver\nacceleration::Matrix{Float64}: Acceleration of each point\nb_int::Matrix{Float64}: Internal force density of each point\nb_ext::Matrix{Float64}: External force density of each point\ndamage::Vector{Float64}: Damage of each point\nn_active_bonds::Vector{Int}: Number of intact bonds for each point\n\n\n\n\n\n","category":"type"},{"location":"api_public/#Peridynamics.OSBMaterial","page":"Public API","title":"Peridynamics.OSBMaterial","text":"OSBMaterial <: AbstractMaterial\n\nMaterial type for ordinary state-based peridynamic simulations\n\nAllowed material parameters\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nnu::Float64: Poisson's ratio\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nAllowed export fields\n\nposition::Matrix{Float64}: Position of each point\ndisplacement::Matrix{Float64}: Displacement of each point\nvelocity::Matrix{Float64}: Velocity of each point\nvelocity_half::Matrix{Float64}: Velocity parameter for Verlet time solver\nacceleration::Matrix{Float64}: Acceleration of each point\nb_int::Matrix{Float64}: Internal force density of each point\nb_ext::Matrix{Float64}: External force density of each point\ndamage::Vector{Float64}: Damage of each point\nn_active_bonds::Vector{Int}: Number of intact bonds for each point\n\n\n\n\n\n","category":"type"},{"location":"api_public/#Peridynamics.NOSBMaterial","page":"Public API","title":"Peridynamics.NOSBMaterial","text":"NOSBMaterial <: AbstractMaterial\n\nMaterial type for non-ordinary state-based peridynamic simulations\n\nAllowed material parameters\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nnu::Float64: Poisson's ratio\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nAllowed export fields\n\nposition::Matrix{Float64}: Position of each point\ndisplacement::Matrix{Float64}: Displacement of each point\nvelocity::Matrix{Float64}: Velocity of each point\nvelocity_half::Matrix{Float64}: Velocity parameter for Verlet time solver\nacceleration::Matrix{Float64}: Acceleration of each point\nb_int::Matrix{Float64}: Internal force density of each point\nb_ext::Matrix{Float64}: External force density of each point\ndamage::Vector{Float64}: Damage of each point\nn_active_bonds::Vector{Int}: Number of intact bonds for each point\n\n\n\n\n\n","category":"type"},{"location":"api_public/#Peridynamics.CKIMaterial","page":"Public API","title":"Peridynamics.CKIMaterial","text":"CKIMaterial <: AbstractMaterial\n\nMaterial type for continuum-kinematics-inspired peridynamic simulations\n\nAllowed material parameters\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nnu::Float64: Poisson's ratio\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nAllowed export fields\n\nTODO struct\n\n\n\n\n\n","category":"type"},{"location":"api_public/#Peridynamics.Body","page":"Public API","title":"Peridynamics.Body","text":"Body(material, position, volume)\nBody(material, inp_file)\n\nCreates a body for use in peridynamic calculation\n\nArguments\n\nmaterial::AbstractMaterial: Specifies which material model is used\nposition::AbstractMatrix: 3×n matrix with position of each point\nvolume::AbstractVector: Vector with volume of each point\ninp_file::AbstractString: A Abaqus input file containing meshes, imported with   read_inp\n\nThrows\n\nError if n_points = 0\nDimensionMismatch: Error if dimension of position != 3\n\nExample\n\njulia> l, Δx, = 1.0, 1/50;\n\njulia> pos, vol = uniform_box(l, l, 0.1l, Δx);\n\njulia> b = Body(BBMaterial(), pos, vol);\n\njulia> b\nBody{BBMaterial, Peridynamics.BBPointParameters}(BBMaterial(), 12500,\n[-0.49 -0.47 … 0.47 0.49; -0.49 -0.49 … 0.49 0.49; -0.04 -0.04 … 0.04 0.04],\n[8.000000000000001e-6, 8.000000000000001e-6,  …  8.000000000000001e-6],\nBool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1  …  1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\nDict{Symbol, Vector{Int64}}(), Peridynamics.BBPointParameters[],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\nPeridynamics.SingleDimBC[], Peridynamics.SingleDimIC[], Peridynamics.PointSetsPreCrack[])\n\n\n\nwarning: Internal use only\nPlease note that the fields are intended for internal use only. They are not part of the public API of Peridynamics.jl, and thus can be altered (or removed) at any time without it being considered a breaking change.\n\nBody{Material,PointParameters}\n\nType Parameters\n\nMaterial <: AbstractMaterial: Type of the specified material model\nPointParameters <: AbstractPointParameters: Type of the point parameters\n\nFields\n\nmat::Material: Specified material model\nn_points::Int: Number of material points that represent the body\nposition::Matrix{Float64}: 3×n_points matrix with position for each point\nvolume::Vector{Float64}: Vector with volume for each point\nfail_permit::Vector{Bool}: Vector that describes if failure is allowed for each point\npoint_sets::Dict{Symbol,Vector{Int}}: Dictionary containing the defined point sets\npoint_params::Vector{PointParameters}: Vector with material parameter sets\nparams_map::Vector{Int}: Vector that assigns a material parameter set to each point\nsingle_dim_bcs::Vector{SingleDimBC}: Vector with defined boundary conditions\nsingle_dim_ics::Vector{SingleDimIC}: Vector with defined initial conditions\npoint_sets_precracks::Vector{PointSetsPreCrack}: Vector with defined cracks\n\n\n\n\n\n","category":"type"},{"location":"api_public/#Peridynamics.MultibodySetup","page":"Public API","title":"Peridynamics.MultibodySetup","text":"MultibodySetup(body_pairs...)\n\nSetup for a peridynamic simulation with multiple bodies.\n\nArguments\n\nbody_pairs::Vararg{Pair{Symbol,<:AbstractBody},N}) where {N}:\n\nThrows\n\nError if less than 2 bodies are defined\n\nExample\n\n\n\nwarning: Internal use only\nPlease note that the fields are intended for internal use only. They are not part of the public API of Peridynamics.jl, and thus can be altered (or removed) at any time without it being considered a breaking change.\n\nMultibodySetup{Bodies}\n\nType Parameters\n\nBodies <: Tuple: Tuple containing all the types of the bodies\n\nFields\n\nbodies::Bodies:\nbody_names::Vector{Symbol}:\nbody_idxs::Dict{Symbol,Int}:\nsrf_contacts::Vector{ShortRangeForceContact}:\n\nTODO\n\n\n\n\n\n","category":"type"},{"location":"api_public/#Peridynamics.VelocityVerlet","page":"Public API","title":"Peridynamics.VelocityVerlet","text":"VelocityVerlet(; time=-1, steps=-1, stepsize=-1, safety_factor=0.7)\n\nProcedure for calculating discrete time steps\n\nKeywords\n\ntime::Real=-1: Time covered by the simulation\nsteps::Int=-1: Number of calculated time steps\nstepsize::Real=-1: Size of discrete time steps\nsafety_factor::Real=0.7: Safety factor for step size to ensure stability\n\nThrows\n\nError if time and number of steps are specified\nError if no time or number of steps are specified\nError if safety factor is not between 0 and 1\n\nExample\n\njulia> vv = VelocityVerlet(steps=2000)\n\n\n\nwarning: Internal use only\nPlease note that the fields are intended for internal use only. They are not part of the public API of Peridynamics.jl, and thus can be altered (or removed) at any time without it being considered a breaking change.\n\nVelocityVerlet <: AbstractTimeSolver\n\nType Parameter\n\n-AbstractTimeSolver: Type of the time solver\n\nFields\n\nend_time::Float64: Time covered by the simulation\nn_steps::Int: Number of calculated time steps\nΔt::Float64: Size of discrete time steps\nsafety_factor::Float64: Safety factor for step size to ensure stability\n\n\n\n\n\n","category":"type"},{"location":"api_public/#Peridynamics.Job","page":"Public API","title":"Peridynamics.Job","text":"Job(spatial_setup, time_solver; kwargs...)\n\nJob that contains all the information required for a peridynamic simulation\n\nArguments\n\nspatial_setup::AbstractSpatialSetup: Body or Multibody setup for the simulation\ntime_solver::AbstractTimeSolver: Method for calculating discrete time steps\n\nKeywords\n\npath::String: Storage path for results\nfreq::Int: Frequency of time steps that are exported\nfields::NTuple{N,Symbol}: Exported fields            Possible export fields depend on the selected material model.            See material type documentation.            Default export fields: (:displacement, :damage)\n\nThrows\n\nError if keyword is not allowed\n\nExample\n\njulia> b = Body(BBMaterial(), pos, vol)\n\njulia> vv = VelocityVerlet(steps=2000)\n\njulia> job = Job(b, vv;\n           path=joinpath(@__DIR__, \"results\", \"mode_I\"),\n           fields=(:displacement, :velocity, :acceleration, :damage))\nJob{Body{BBMaterial, Peridynamics.BBPointParameters}, VelocityVerlet}(Body{BBMaterial,\nPeridynamics.BBPointParameters}(BBMaterial(), 12500, [-0.49 -0.47 …\n\nNote that for the keyword fields a NTuple is expected! If you want to export only one field, insert , after the field:\n\njulia> job = Job(b, vv;\n           path=joinpath(@__DIR__, \"results\", \"mode_I\"),\n           fields=(:displacement,))\n\n\n\nwarning: Internal use only\nPlease note that the fields are intended for internal use only. They are not part of the public API of Peridynamics.jl, and thus can be altered (or removed) at any time without it being considered a breaking change.\n\nJob{SpatialSetup,TimeSolver,Options}\n\nType Parameters\n\nSpatialSetup <: AbstractSpatialSetup: Type of the spatial setup\nTimeSolver <: AbstractTimeSolver: Type of the time solver\nOptions <: AbstractJobOptions: Type of the export options\n\nFields\n\nspatial_setup::AbstractSpatialSetup: Body or Multibody setup for the simulation\ntime_solver::AbstractTimeSolver: Method for calculating discrete time steps\noptions::AbstractJobOptions: Options for simulation data export\n\n\n\n\n\n","category":"type"},{"location":"api_public/#Functions","page":"Public API","title":"Functions","text":"","category":"section"},{"location":"api_public/","page":"Public API","title":"Public API","text":"point_set!\npoint_sets\nn_points\nfailure_permit!\nmaterial!\nvelocity_bc!\nvelocity_ic!\nforcedensity_bc!\nprecrack!\ncontact!\nread_vtk\nuniform_box\nsubmit","category":"page"},{"location":"api_public/#Peridynamics.point_set!","page":"Public API","title":"Peridynamics.point_set!","text":"point_set!(body, set, points)\npoint_set!(fun, body, set)\n\nCreates the point set set in body containing all points either defined in vector points or described by function fun.\n\nArguments\n\nbody::AbstractBody: Peridynamic body\nset::Symbol: Point set on body\npoints::AbstractVector: Vector of point indices\nfun::Function: Function that describes points contained in point set\n\nThrows\n\nError if a point set called set is already defined\nBoundsError: If points in V do not exist\n\nExample\n\njulia> point_set!(p -> p[1] ≤ -l/2+a && 0 ≤ p[2] ≤ 2δ, b, :set_a)\n\njulia> point_set!(p -> p[1] ≤ -l/2+a && -2δ ≤ p[2] < 0, b, :set_b)\n\njulia> b.point_sets\nDict{Symbol, Vector{Int64}} with 4 entries:\n  :set_a      => [1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, …\n  :set_b      => [951, 952, 953, 954, 955, 956, 957, 958, 959, 960  …  1…\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.point_sets","page":"Public API","title":"Peridynamics.point_sets","text":"point_sets(body)\n\nReturns all point sets of the body.\n\nArguments\n\nbody::AbstractBody: Peridynamic body\n\nExample\n\njulia> body = Body(BBMaterial(), rand(3,100), rand(100))\n100-point Body{BBMaterial{NoCorrection}}:\n  100-point set `all_points`\n\njulia> point_set!(body, :set_a, 1:10) # first ten points\n\njulia> Peridynamics.point_sets(body)\nDict{Symbol, Vector{Int64}} with 2 entries:\n  :all_points => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  91, 92, 93, 94, 95, 96, 97, 98, 9…\n  :set_a      => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.n_points","page":"Public API","title":"Peridynamics.n_points","text":"n_points(body)\nn_points(multibody_setup)\n\nReturns the number of points in a body or the total number of points in a multibody setup.\n\nTODO\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.failure_permit!","page":"Public API","title":"Peridynamics.failure_permit!","text":"failure_permit!(body, fail_permit)\nfailure_permit!(body, set, fail_permit)\n\nDetermines whether failure is permitted fail_permit = true or prohibited fail_permit = false in the body or the point set set of the body.\n\nArguments\n\nbody::AbstractBody: Peridynamic body\nset::Symbol: Point set on body\nfail_permit::Bool: Decides if failure is allowed on considered body or point set.\n\nThrows\n\nError if no point set called set exists\n\nExample\n\njulia> failure_permit!(b, :set_bottom, false)\n\njulia> b.fail_permit\n12500-element Vector{Bool}:\n 0\n 0\n 0\n ⋮\n 1\n 1\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.material!","page":"Public API","title":"Peridynamics.material!","text":"material!(body, set; kwargs...)\nmaterial!(body; kwargs...)\n\nSpecifies material parameters used for body or point set set\n\nArguments\n\nbody::AbstractBody: Peridynamic body\nset::Symbol: Point set on body\n\nKeywords\n\nAllowed keywords depend on the selected material model. See material type documentation. Default material parameter keywords:\n\nhorizon::Float64: Radius of point interactions\nrho::Float64: Density\nE::Float64: Young's modulus\nnu::Float64: Poisson's ratio\nGc::Float64: Critical energy release rate\nepsilon_c::Float64: Critical strain\n\nThrows\n\nError if parameter is not eligible for specification in selected material model\n\nExample\n\njulia> material!(b; horizon=δ, E=2.1e5, rho=8e-6, Gc=2.7)\n\njulia> b.point_params\n1-element Vector{Peridynamics.BBPointParameters}:\n Peridynamics.BBPointParameters(0.0603, 8.0e-6, 210000.0, 0.25, 84000.0, 140000.0, 84000.0,\n84000.0, 2.7, 0.013329779199368195, 6.0671037207022026e10)\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.velocity_bc!","page":"Public API","title":"Peridynamics.velocity_bc!","text":"velocity_bc!(fun, body, set, dim)\n\nSpecifies velocity boundary conditions for point set set on body\n\nArguments\n\nfun::Function: Velocity condition function\nbody::AbstractBody: Peridynamic body\nset::Symbol: Point set on body\ndim::Union{Integer,Symbol}: Direction of velocity\n\nThrows\n\nError if no point set called set exists\nError if dimension is not correctly specified\nError if function is not suitable as condition function\n\nExample\n\njulia> velocity_bc!(t -> -9.81 * t, b, :set_bottom, :y)\n\njulia> b.single_dim_bcs\n\n1-element Vector{Peridynamics.SingleDimBC}:\n Peridynamics.SingleDimBC{var\"#15#16\"}(var\"#15#16\"(), :velocity_half, :set_bottom, 0x02)\n\njulia> velocity_bc!(t -> 40, b, :set_a, 1)\n\njulia> b.single_dim_bcs\n2-element Vector{Peridynamics.SingleDimBC}:\n Peridynamics.SingleDimBC{var\"#15#16\"}(var\"#15#16\"(), :velocity_half, :set_bottom, 0x02)\n Peridynamics.SingleDimBC{var\"#17#18\"}(var\"#17#18\"(), :velocity_half, :set_a, 0x01)\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.velocity_ic!","page":"Public API","title":"Peridynamics.velocity_ic!","text":"velocity_ic!(body, set, dim, value)\n\nSpecifies initital conditions for the velocity of points in point set set on body\n\nArguments\n\nbody::AbstractBody: Peridynamic body\nset::Symbol: Point set on body\ndim::Union{Integer,Symbol}: Direction of velocity\nvalue::Real: Initial velocity value\n\nThrows\n\nError if no point set called set exists\nError if dimension is not correctly specified\n\nExample\n\njulia> velocity_ic!(b, :set_b, :y, 20)\n\njulia> b.single_dim_ics\n1-element Vector{Peridynamics.SingleDimIC}:\n Peridynamics.SingleDimIC(20.0, :velocity, :set_b, 0x02)\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.forcedensity_bc!","page":"Public API","title":"Peridynamics.forcedensity_bc!","text":"forcedensity_bc!(fun, body, set, dim)\n\nSpecifies boundary conditions for force density on points of point set set on body\n\nArguments\n\nfun::Function: Condition function\nbody::AbstractBody: Peridynamic body\nset::Symbol: Point set on body\ndim::Union{Integer,Symbol}: Direction of force density\n\nThrows\n\nError if no point set called set exists\nError if dimension is not correctly specified\nError if function is not suitable as condition function\n\nExample\n\njulia> forcedensity_bc!(t -> 40, b, :set_a, 1)\n\njulia> b.single_dim_bcs\n1-element Vector{Peridynamics.SingleDimBC}:\n Peridynamics.SingleDimBC{var\"#25#26\"}(var\"#25#26\"(), :b_ext, :set_a, 0x01)\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.precrack!","page":"Public API","title":"Peridynamics.precrack!","text":"precrack!(body, set_a, set_b; update_dmg=true)\n\nCreates a crack between two point sets by prohibiting interaction between points of different point sets.\n\nArguments\n\nbody::AbstractBody: Peridynamic body\nset_a::Symbol: First point set on body\nset_b::Symbol: Second point set on body\n\nKeywords\n\nupdate_dmg::Bool: If update_dmg=true, the material points involved in the predefined                     are initially damaged. If update_dmg=false, the bonds involved are                     deleted and the material points involved with the predefined crack                     are not damaged.                     (default=true)\n\nThrows\n\nError if point set set_a or set_b does not exist\nError if point sets contain common points\n\nExample\n\njulia> precrack!(b, :set_a, :set_b)\n\njulia> b.point_sets_precracks\n1-element Vector{Peridynamics.PointSetsPreCrack}:\n Peridynamics.PointSetsPreCrack(:set_a, :set_b)\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.contact!","page":"Public API","title":"Peridynamics.contact!","text":"contact!(ms, body_a, body_b; kwargs...)\n\nDefines contact between multiple bodies\n\nArguments\n\nms::AbstractMultibodySetup: The multibody setup defined to simulate the contact\nbody_a::Symbol: First body in contact\nbody_b::Symbol: Second body in contact\n\nKeywords\n\nradius::Float64:\nsc::Float64:\n\nThrows\n\nError if a called body is not defined in the multibody setup\nError if keyword is not allowed\n\nTODO kwargs\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.VtkReader.read_vtk","page":"Public API","title":"Peridynamics.VtkReader.read_vtk","text":"read_vtk(file::AbstractString)\n\nRead vtu or pvtu file containing simulation results of a time step.\n\nArguments\n\nfile::String: Path to VTK file in vtu or pvtu format\n\nReturns\n\nDict{String, VecOrMat{Float64}}: Simulation results as a dictionary\n\nExamples\n\njulia> read_vtk(\"ExampleSimulation_t3000.vtu\")\nDict{String, VecOrMat{Float64}} with 6 entries:\n  \"position\"     => [-0.497302 -0.497303 … 0.497303 0.497302; -0.0225023 -0…\n  \"damage\"       => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0  …  0…\n  \"time\"         => [0.000237879]\n  \"displacement\" => [0.00019766 0.000196793 … -0.000196793 -0.00019766; -2.…\n  \"velocity\"     => [-2.55436 -1.5897 … 1.5897 2.55436; 0.827107 0.234996 ……\n  \"b_int\"        => [-7.00131e9 -8.45411e9 … 8.45411e9 7.00131e9; -5.0164e8…\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.uniform_box","page":"Public API","title":"Peridynamics.uniform_box","text":"uniform_box(lx, ly, lz, ΔX0; center_x=0, center_y=0, center_z=0)\n\nCreates a grid of points in a cuboid form with lengths lx, ly and lz and the distance ΔX0 between the points.\n\nArguments\n\nlx::Real: Length in x-dimension\nly::Real: Length in y-dimension\nlz::Real: Length in z-dimension\nΔX0::Real: Distance between neighboring points\n\nKeywords\n\ncenter_x::Real=0: Center of the cuboid in x-dimension\ncenter_y::Real=0: Center of the cuboid in y-dimension\ncenter_z::Real=0: Center of the cuboid in z-dimension\n\nReturns\n\nposition::Matrix: 3×n matrix with position of each point\nvolume::Vector: Vector with volume of each point\n\nExample\n\njulia> position, volume = uniform_box(10, 10, 10, 2);\n\njulia> position\n3×125 Matrix{Float64}:\n -4.0  -2.0   0.0   2.0   4.0  -4.0  -2.0   0.0  …  0.0  2.0  4.0  -4.0  -2.0  0.0  2.0  4.0\n -4.0  -4.0  -4.0  -4.0  -4.0  -2.0  -2.0  -2.0     2.0  2.0  2.0   4.0   4.0  4.0  4.0  4.0\n -4.0  -4.0  -4.0  -4.0  -4.0  -4.0  -4.0  -4.0     4.0  4.0  4.0   4.0   4.0  4.0  4.0  4.0\n\njulia> volume\n125-element Vector{Int64}:\n 8\n 8\n 8\n 8\n ⋮\n 8\n 8\n 8\n 8\n\n\n\n\n\n","category":"function"},{"location":"api_public/#Peridynamics.submit","page":"Public API","title":"Peridynamics.submit","text":"submit(job::Job; kwargs...)\n\nSubmits the job to start calculations\n\nArguments\n\njob::Job: Job that contains all defined parameters and conditions\n\nKeywords\n\nquiet::Bool: If :quiet=true, no outputs are printed in the terminal.\n\nThrows\n\nError if keyword is not allowed\n\nExample\n\njulia> job = Job(b, vv;\n           path=joinpath(@__DIR__, \"results\", \"mode_I\"),\n           fields=(:displacement, :damage));\n\njulia> submit(job);\nsolve... 100%|████████████████████| Time: 0:00:11\n\n\n\n\n\n","category":"function"},{"location":"howto_visualization/#visualization","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"The following section explains a few visualization basics with ParaView (ParaView 5.10.1 on macOS Monterey).","category":"page"},{"location":"howto_visualization/#Basics","page":"Visualization with ParaView","title":"Basics","text":"","category":"section"},{"location":"howto_visualization/#1.-Load-the-results","page":"Visualization with ParaView","title":"1. Load the results","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"Load the resulting .vtu files into ParaView with File rightarrow Open.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"../assets/ParaViewTutorial1.png\" width=\"600\" />","category":"page"},{"location":"howto_visualization/#2.-Select-the-time-array","page":"Visualization with ParaView","title":"2. Select the time array","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"Select the time array and all the parameters you want to analyze and then Apply.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"../assets/ParaViewTutorial2.png\" width=\"1000\" />","category":"page"},{"location":"howto_visualization/#3.-Representation-and-coloring","page":"Visualization with ParaView","title":"3. Representation and coloring","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"Change the representation to Points and then choose the coloring parameter.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"../assets/ParaViewTutorial3.png\" width=\"1000\" />","category":"page"},{"location":"howto_visualization/#4.-Point-styling","page":"Visualization with ParaView","title":"4. Point styling","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"Activate the setting to render points as spheres and set an appropriate point size.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"../assets/ParaViewTutorial4.png\" width=\"1000\" />","category":"page"},{"location":"howto_visualization/#5.-Legend-styling","page":"Visualization with ParaView","title":"5. Legend styling","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"By default, the legend limits are set for the current range of the coloring parameter. In this example, for the initial time step all damage values are zero so strange legend limits appear.","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"<img src=\"../assets/ParaViewTutorial5.png\" width=\"1000\" />","category":"page"},{"location":"howto_visualization/#6.-Save-animation","page":"Visualization with ParaView","title":"6. Save animation","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"To generate a animation, use File rightarrow Save Animation... and follow the instructions.","category":"page"},{"location":"howto_visualization/#Additional-Learning-Resources","page":"Visualization with ParaView","title":"Additional Learning Resources","text":"","category":"section"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"ParaView has a great documentation and a lot of resources for learning. For example, see:","category":"page"},{"location":"howto_visualization/","page":"Visualization with ParaView","title":"Visualization with ParaView","text":"ParaView Documentation\nParaView User's Guide","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"EditURL = \"../literate/tutorial_tension_dynfrac.jl\"","category":"page"},{"location":"generated/tutorial_tension_dynfrac/#tutorial_tension_dynfrac","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"","category":"section"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Import the package:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"using Peridynamics\nusing Peridynamics.AbaqusMeshConverter","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Read and convert the Abaqus FEM mesh of a tensile test into a point cloud for the peridynamic model:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"# insert your correct path to the downloaded mesh file!\npos, vol, pointsets = read_inp(joinpath(@__DIR__, \"..\", \"assets\", \"TensileTestMesh.inp\"))","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Create a body with the points from the mesh: (The bond-based material model is used here.)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"b = Body(BBMaterial(), pos, vol)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Convert the element sets defined in Abaqus into point sets of the Body:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"point_set!(b, :top, pointsets[\"top\"])\npoint_set!(b, :bottom, pointsets[\"bottom\"])","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Specify the material parameters as:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"material parameter value\nHorizon $ δ $ 001  mathrmm\nDensity ρ $ 2700 \\,\\mathrm{kg}\\,\\mathrm{m}^{-3}$\nYoung's modulus E $ 70 \\cdot 10^{9} \\, \\mathrm{Pa}$\nGriffith's parameter G_c 100  mathrmN  mathrmm^-1","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"material!(b; horizon=0.01, rho=2700, E=70e9, Gc=100)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"As loading condition for the specimen, a constant velocity of 06  mathrmmmathrms^-1 in x-direction is set for the bottom and top.","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"velocity_bc!(t -> -0.6, b, :bottom, 1)\nvelocity_bc!(t -> 0.6, b, :top, 1)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Set the number of time steps for the Velocity Verlet algorithm to 500 time steps:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"vv = VelocityVerlet(steps=500)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Define the storage path:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"root = joinpath(@__DIR__, \"results\", \"tension_dynamic_fracture\")","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Create the job:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"job = Job(b, vv; path=root)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"Submit the job to start simulations:","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"submit(job)","category":"page"},{"location":"generated/tutorial_tension_dynfrac/","page":"Mode I tension dynamic with fracture","title":"Mode I tension dynamic with fracture","text":"(Image: ) (Visualization made with ParaView)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"EditURL = \"../literate/tutorial_tension_precrack.jl\"","category":"page"},{"location":"generated/tutorial_tension_precrack/#tutorial_tension_precrack","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"","category":"section"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"Import the package:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"First some geometrical parameters are defined. These are edge length l, point spacing Δx and crack length a.","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"l, Δx, a = 100.0, 100/50, 50.0","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"Now a cuboid body with the specified edge lengths and a thickness of one tenth thereof is created using the bond-based material model.","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"pos, vol = uniform_box(l, l, 0.1l, Δx)\nb = Body(BBMaterial(), pos, vol)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"The following material parameters are set:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"material parameter value\nHorizon $ δ $ 3015 cdot Δx\nYoung's modulus E $ 210000 \\, \\mathrm{MPa}$\nDensity ρ $ 8 \\cdot 10^{-6}\\,\\mathrm{kg}\\,\\mathrm{mm}^{-3}$\nGriffith's parameter G_c 27  mathrmN  mathrmmm^-1","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"material!(b; horizon=3.015Δx, E=2.1e5, rho=8e-6, Gc=2.7)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"Two point sets are defined to insert a crack between them:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"point_set!(p -> p[1] ≤ -l/2+a && 0 ≤ p[2] ≤ 2δ, b, :set_a)\npoint_set!(p -> p[1] ≤ -l/2+a && -2δ ≤ p[2] < 0, b, :set_b)\nprecrack!(b, :set_a, :set_b)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"Two more point sets at the top and at the bottom are created, which are used for the velocity boundary condition.","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"point_set!(p -> p[2] > l/2-Δx, b, :set_top)\npoint_set!(p -> p[2] < -l/2+Δx, b, :set_bottom)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"The tension is applied by moving the ends of the body apart at a constant speed of pm 50  mathrmmm  mathrms^-1:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"velocity_bc!(t -> -50, b, :set_bottom, :y)\nvelocity_bc!(t -> 50, b, :set_top, :y)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"The Velocity Verlet algorithm is used as time integration method and 2000 time steps are calculated:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"vv = VelocityVerlet(steps=2000)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"Then the storage path is defined:","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"root = joinpath(@__DIR__, \"results\", \"mode_i\")","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"Now the job is defined","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"job = Job(b, vv; path=root)","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"Finally the job is submitted to start simulations","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"submit(job)","category":"page"},{"location":"generated/tutorial_tension_precrack/#Displacement-results:","page":"Mode I tension with predefined crack","title":"Displacement results:","text":"","category":"section"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/#Damage-results:","page":"Mode I tension with predefined crack","title":"Damage results:","text":"","category":"section"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_precrack/","page":"Mode I tension with predefined crack","title":"Mode I tension with predefined crack","text":"(Visualizations made with ParaView)","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"<img src=\"../assets/logo.gif\" width=\"400\"/>","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"(Visualization made with ParaView)","category":"page"},{"location":"tutorial_logo/#tutorial_logo","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"","category":"section"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"The Julia logo crashing into a plate and braking it into many pieces.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"First, we have to load the Peridynamics.jl package.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"using Peridynamics","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"Now we create the plate in the background by specifying the dimensions and the point spacing.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"# PLATE - INDEX: p\ndimXYₚ = 0.1 # [m]\ndimZₚ = 0.01 # [m]\nΔxₚ = dimXYₚ/50 # [m]\npcₚ = PointCloud(dimXYₚ, dimXYₚ, dimZₚ, Δxₚ)","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"A cubic point cloud is assembled, and only the points inside a specified radius are preserved to create the spheres of the logo. These points are then copied three times and moved to the correct position to represent the logo.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"# SPHERES OF LOGO - INDEX: s\nØₛ = 0.03 # [m]\nVₛ = 4 / 3 * π * (Øₛ / 2)^3 # [m³]\nΔxₛ = Øₛ / 20 # [m]\npcₛ₀ = PointCloud(Øₛ, Øₛ, Øₛ, Δxₛ)\nsphere_point_set = @views findall(\n    sqrt.(\n        pcₛ₀.position[1, :] .^ 2 + pcₛ₀.position[2, :] .^ 2 + pcₛ₀.position[3, :] .^ 2\n    ) .<= Øₛ / 2,\n)\npcₛ₀.position[3, sphere_point_set] .+= Øₛ / 2 + dimZₚ / 2 + 1.1Δxₚ\npcₛ₁ = PointCloud(pcₛ₀.position[:, sphere_point_set], pcₛ₀.volume[sphere_point_set])\npcₛ₂ = deepcopy(pcₛ₁)\npcₛ₃ = deepcopy(pcₛ₁)\nrₗ = Øₛ / 2 + 0.2 * Øₛ\npcₛ₁.position[2, :] .+= rₗ\npcₛ₂.position[1, :] .+= rₗ * cos(30π / 180)\npcₛ₂.position[2, :] .-= rₗ * sin(30π / 180)\npcₛ₃.position[1, :] .-= rₗ * cos(30π / 180)\npcₛ₃.position[2, :] .-= rₗ * sin(30π / 180)","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"Different material properties are used for the plate and the spheres.","category":"page"},{"location":"tutorial_logo/#Plate","page":"Peridynamics.jl Logo","title":"Plate","text":"","category":"section"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"Horizon delta = 3015 Delta x_p\nDensity rho = 2000mathrmkgmathrmm^-3\nYoungs modulus E = 30 times 10^9  mathrmPa\nGriffith's parameter G_c = 10  mathrmN  mathrmm^-1","category":"page"},{"location":"tutorial_logo/#Julia-logo-spheres","page":"Peridynamics.jl Logo","title":"Julia-logo spheres","text":"","category":"section"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"Horizon delta = 3015 Delta x_s\nDensity rho = 7850mathrmkgmathrmm^-3\nYoungs modulus E = 210 times 10^9  mathrmPa\nGriffith's parameter G_c = 1000  mathrmN  mathrmm^-1","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"matₚ = BBMaterial(;\n    horizon=3.015Δxₚ,\n    rho=2000.0,\n    E=30e9,\n    Gc=10.0,\n)\nmatₛ = BBMaterial(;\n    horizon=3.015Δxₛ,\n    rho=7850.0,\n    E=210e9,\n    Gc=1000.0,\n)","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"All material points of the spheres have a initial velocity of -20 mathrmm  mathrms^-1 in z-direction.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"icₛ = [VelocityIC(-20.0, 1:pcₛ₁.n_points, 3)]","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"For the contact analysis, every body needs to be specified with a BodySetup. Time can be saved by using only one sphere for the calculation of the stable time step.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"plate = BodySetup(pcₚ, matₚ)\nsphere1 = BodySetup(pcₛ₁, matₛ; ics=icₛ)\nsphere2 = BodySetup(pcₛ₂, matₛ; ics=icₛ, calc_timestep=false)\nsphere3 = BodySetup(pcₛ₃, matₛ; ics=icₛ, calc_timestep=false)\nbody_setup = [plate, sphere1, sphere2, sphere3]","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"Contact between the plate and the three spheres needs to be specified.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"contact = [Contact((1, 2), Δxₚ), Contact((1, 3), Δxₚ), Contact((1, 4), Δxₚ)]","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"For this simulation, 3000 time steps with explicit time integration and the velocity verlet algorithm are used.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"td = VelocityVerlet(3000)","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"Now we give the simulation a name and create a directory for the results. ","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"simulation_name = \"Logo\"\nresfolder = joinpath(@__DIR__, \"results\", simulation_name)\nmkpath(resfolder)\nes = ExportSettings(resfolder, 10)","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"To complete everything, the PDContactAnalysis is created and submitted for simulation.","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"job = PDContactAnalysis(;\n    name=simulation_name, body_setup=body_setup, contact=contact, td=td, es=es\n)","category":"page"},{"location":"tutorial_logo/","page":"Peridynamics.jl Logo","title":"Peridynamics.jl Logo","text":"results = submit(job);","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"EditURL = \"../literate/tutorial_tension_static.jl\"","category":"page"},{"location":"generated/tutorial_tension_static/#tutorial_tension_static","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"","category":"section"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"Import the package:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"using Peridynamics\nusing Peridynamics.AbaqusMeshConverter","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"Read and convert the Abaqus FEM mesh of a tensile test into a point cloud for the peridynamic model:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"# insert your correct path to the downloaded mesh file!\npos, vol, pointsets = read_inp(joinpath(@__DIR__, \"..\", \"assets\", \"TensileTestMesh.inp\"))","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"(Image: )","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"Create a body with the points from the mesh: (The bond-based material model is used here.)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"b = Body(BBMaterial(), pos, vol)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"Convert the element sets defined in Abaqus into point sets of the Body:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"point_set!(b, :top, pointsets[\"top\"])\npoint_set!(b, :bottom, pointsets[\"bottom\"])","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"Specify the material parameters as:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"material parameter value\nHorizon $ δ $ 001  mathrmm\nDensity ρ $ 2700 \\,\\mathrm{kg}\\,\\mathrm{m}^{-3}$\nYoung's modulus E $ 70 \\cdot 10^{9} \\, \\mathrm{Pa}$\nGriffith's parameter G_c 100  mathrmN  mathrmm^-1","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"material!(b; horizon=0.01, rho=2700, E=70e9, Gc=100)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"As loading condition for the specimen, a constant force density of 1 times 10^9  mathrmNmathrmm^-3 in x-direction is set for the bottom and top.","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"forcedensity_bc!(t -> -1e9, b, :bottom, 1)\nforcedensity_bc!(t -> 1e9, b, :top, 1)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"Do not allow failure in the entire body:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"failure_permit!(b, false)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"We set the number of time steps for the dynamic relaxation algorithm to 500 time steps.","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"dr = DynamicRelaxation(steps=500)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"Define the storage path:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"root = joinpath(@__DIR__, \"results\", \"tension_static\");\nnothing #hide","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"Create the job:","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"job = Job(b, dr; path=root)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"submit(job)","category":"page"},{"location":"generated/tutorial_tension_static/","page":"Mode I tension quasi-static","title":"Mode I tension quasi-static","text":"(Image: ) (Visualization made with ParaView)","category":"page"},{"location":"crackedplateundertension/#cracked-plate-under-tension","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"","category":"section"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"The complete script for this tutorial can be found here: CrackedPlateUnderTension.jl.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"First, we have to load the Peridynamics.jl package.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"using Peridynamics","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"Now whe have the exported types and methods available in the namespace. This allows us to construct a PointCloud by specifying the dimensions and the point spacing Delta x.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"length_x = 0.05 # [m]\nlength_y = 0.05 # [m]\nlength_z = 0.005 # [m]\nΔx = length_y / 60 # point spacing: 60 points along y-describe_interactions\npc = PointCloud(length_x, length_y, length_z, Δx)","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"As next step, we define the material with the parameters horizon (horizon delta in peridynamics theory), density rho, youngs modulus E and critical energy release rate Gc.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"mat = BBMaterial(;\n    horizon = 3.015Δx, # [m]\n    rho = 7850.0, # [kg/m^3]\n    E = 210e9, # [N/m^2]\n    Gc = 1000.0, # [N/m]\n)","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"Now we want the plate to have a crack from the left side to the middle. Therefore we need to specify a PreCrack object. A PreCrack is simply two Vector{Int}'s containing point indices. Points in point_id_set_a don't interact with points in  point_id_set_b. So we need to specify all points above and below the crack, as seen in the following image:","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/blob/main/docs/src/assets/CrackedPlateUnderTension0.png?raw=true\" width=\"600\" />","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"(Visualization made with ParaView)","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"cracklength = 0.5 * length_x\nprecrack_set_a = findall(\n    (pc.position[2, :] .>= 0) .&\n    (pc.position[2, :] .< 12 * Δx) .&\n    (pc.position[1, :] .<= -length_x / 2 + cracklength),\n)\nprecrack_set_b = findall(\n    (pc.position[2, :] .<= 0) .&\n    (pc.position[2, :] .> -12 * Δx) .&\n    (pc.position[1, :] .<= -length_x / 2 + cracklength),\n)\nprecracks = [PreCrack(precrack_set_a, precrack_set_b)]","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"The PreCrack is then wrapped inside a Vector because PDSingleBodyAnalysis needs a Vector{PreCrack} in case you have multiple predefined cracks in your model.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"Now we specify boundary conditions, so the crack has to grow under the load applied to the plate. Therefore, we want the five rows of points in the upper and lower part of the plate to have a constant velocity of 01fracmathrmmmathrms in the positive and negative y-direction to pull the plate apart.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"bc_set_top = findall(pc.position[2,:] .> length_y / 2 - 5.1 * Δx)\nbc_set_bottom = findall(pc.position[2,:] .< -length_y / 2 + 5.1 * Δx)\nbc_top = VelocityBC(t -> 0.1, bc_set_top, 2)\nbc_bottom = VelocityBC(t -> -0.1, bc_set_bottom, 2)\nboundary_conditions = [bc_top, bc_bottom]","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"Now we specify the temporal discretization. Our simulation should run for 2000 time steps and the stable time step should be calculated.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"td = TimeDiscretization(2000)","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"To save the results, we specify with ExportSettings that every 10 timesteps, the results should be saved to a folder named results/CrackedPlateUnderTension.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"simulation_name = \"CrackedPlateUnderTension\"\nresfolder = joinpath(@__DIR__, \"results\", simulation_name)\nmkpath(resfolder)\nes = ExportSettings(resfolder, 10)","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"Now everything needed for the PDSingleBodyAnalysis is defined.","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"job = PDSingleBodyAnalysis(\n    name = simulation_name,\n    pc = pc,\n    mat = mat,\n    precracks = precracks,\n    bcs = boundary_conditions,\n    td = td,\n    es = es,\n)","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"results = submit(job);","category":"page"},{"location":"crackedplateundertension/#Results-after-2000-timesteps:","page":"CrackedPlateUnderTension.jl","title":"Results after 2000 timesteps:","text":"","category":"section"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/blob/main/docs/src/assets/CrackedPlateUnderTension2000.png?raw=true\" width=\"600\"/>","category":"page"},{"location":"crackedplateundertension/","page":"CrackedPlateUnderTension.jl","title":"CrackedPlateUnderTension.jl","text":"(Visualization made with ParaView)","category":"page"},{"location":"general_pd/#Basics","page":"Basics","title":"Basics","text":"","category":"section"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"Peridynamics is a nonlocal formulation of continuum mechanics whereby in the discrete version a body is represented by a group of interconnected material points. The basic idea is that each point interacts with any other point within the distance of the horizon delta.  These interactions called bonds provoke forces between points which can be calculated and result in internal forces.","category":"page"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"<img src=\"../assets/PDBody.png\" width=\"400\"/>","category":"page"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"Each point i of the body mathcalB_0 in initial configuration is characterized by the vector boldsymbolX^i. The neighborhood mathcalH^i of i contains all points j that are within the distance of horizon delta to i:","category":"page"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"    mathcalH^i =  boldsymbolX^j in mathcalB_0    0  left boldsymbolX^j - boldsymbolX^i right leq delta  quad forall  boldsymbolX^i in mathcalB_0  ","category":"page"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"All of those combinations of points i and j form bonds, characterized by  boldsymbolDelta X^ij= boldsymbolX^j - boldsymbolX^i.","category":"page"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"In current configuration mathcalB_t, lowercase letters are used to describe points and bonds: boldsymbolx ^ i  and boldsymbolDelta x^ij.","category":"page"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"The peridynamic equation of motion is established for each material point i and equals [1]","category":"page"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"rho ddotboldsymbolu (boldsymbolX^i  t) = boldsymbolb^mathrmint (boldsymbolX^i  t) + boldsymbolb^mathrmext (boldsymbolX^i  t) \n    qquad forall  boldsymbolX ^ i in mathcalB_0    t geq 0  ","category":"page"},{"location":"general_pd/","page":"Basics","title":"Basics","text":"Assuming the external forces boldsymbolb^mathrmext are known, there are different peridynamic approaches to calculate the internal forces boldsymbolb^mathrmint, for example the bond-based formulation or the continuum-kinematics-inspired formulation.","category":"page"},{"location":"bondbased/#bondbased","page":"Bond-based","title":"Bond-based","text":"","category":"section"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"The initial version of peridynamics is the bond-based (BB) formulation. [1]","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"Here, a pairwise force function boldsymbolf is defined and calculated for each bond of two material points, which depends on the strain of the bond and is aligned in its direction: ","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":" boldsymbolf = d^ij cdot c cdot varepsilon^ij cdot boldsymboln  ","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"with","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"size symbol unit\nbond failure d^ij in 01 -\nmicro-modulus constant [2] c = frac18 cdot kappapi cdot delta^4 fracmathrmkgmathrmm^5mathrms^2\nbond strain varepsilon^ij = fracl^ij-L^ijL^ij -\nbond length in mathcalB_0 L^ij =leftboldsymbolDelta X^ijright mathrmm\nbond length in mathcalB_t l^ij =leftboldsymbolDelta x^ijright mathrmm\ndirection vector boldsymboln = fracboldsymbolDelta x^ijl^ij -","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"In this expression, bond failure d^ij represents whether the bond between points i and j is intact (d^ij=1) or damaged (d^ij=0). The direction vector boldsymboln is oriented in the direction of the bond.  Furthermore, the micro-modulus constant [2]","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"c = frac18 cdot kappapi cdot delta^4 ","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"and the strain of the bond [3]","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"varepsilon^ij = fracl^ij-L^ijL^ij","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"with bond lengths L^ij =leftboldsymbolDelta X^ijright and l^ij =leftboldsymbolDelta x^ijright are used.","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"To get the resulting body forces, now the force function is integrated over the whole body:","category":"page"},{"location":"bondbased/","page":"Bond-based","title":"Bond-based","text":"boldsymbolb^mathrminti = boldsymbolb^mathrmint (boldsymbolX ^ i  t) = int_mathcalH_i boldsymbolf  mathrmdV^j  ","category":"page"},{"location":"continuumbased/#continuumbased","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"","category":"section"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"Continuum-kinematics-inspired peridynamics (CPD) is a formulation that is supposed to deliver more freedom in specifying material parameters. The internal force density is calculated as the sum of three types of point interactions which are one-, two- and three-neighbor interactions [5]:","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"boldsymbolb^mathrminti = boldsymbolb_1^mathrminti + boldsymbolb_2^mathrminti + boldsymbolb_3^mathrminti  ","category":"page"},{"location":"continuumbased/#One-neighbor-interactions","page":"Continuum-kinematics-inspired","title":"One-neighbor interactions","text":"","category":"section"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"<img src=\"../assets/PD_OneNI_1.png\" width=\"250\"/>","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"One-neighbor interactions in CPD correspond to the bonds in bond-based peridynamics, but there is a slightly different way to calculate the internal forces.","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"First, the neighborhood volume is determined:","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"V_mathcalH^i = beta^i cdot frac 4 3 cdotpicdotdelta^3  ","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"Here beta^iin 01 is a factor for the completeness of the neighborhood that takes incomplete point families at the surface into account (see figure 1).","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"<img src=\"../assets/OberflaechenEffekt_3.png\" width=\"350\"/>","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"Now, the effective one-neighbor volume can be calculated","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"V_1^i = fracV_mathcalH^iN_1^i","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"with the number of interactions N_1^i.","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"The internal force density is determined by","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"    boldsymbolb_1^mathrminti = int_mathcalH_1^i d^ij C_1 left( fracl^ijL^ij - 1 right) fracboldsymbolDelta x^ijl^ij  mathrmd V_1^i","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"with the parameters:","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"size symbol unit\nbond failure d^ij in 01 -\nmaterial constant C_1 fracmathrmkgmathrmm^5mathrms^2\nrelative length measures L^ij, l^ij mathrmm\neffective one-neighbor volume V_1^i = fracV_mathcalH^iN_1^i mathrmm^3\nneighborhood volume V_mathcalH^i = beta^i cdot frac 43 cdotpicdotdelta^3 mathrmm^3\nneighborhood completeness beta^iin 01 -\nnumber of one-neighbor interactions N_1^i -","category":"page"},{"location":"continuumbased/#Two-neighbor-interactions","page":"Continuum-kinematics-inspired","title":"Two-neighbor interactions","text":"","category":"section"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"<img src=\"../assets/PD_TwoNI_1.png\" width=\"250\"/>","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"For two-neighbor interactions, the deformation of the area spanned by point i and two of its neighbors j and k is analyzed to calculate the internal force density. For this, relative area measures are defined:","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"    A^ijk=left boldsymbolDelta X^ij times boldsymbolDelta X^ik right   qquad a^ijk=left boldsymbolDelta x^ij times boldsymbolDelta x^ik right   qquad boldsymbola^ijk= boldsymbolDelta x^ij times boldsymbolDelta x^ik  ","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"Other sizes needed to identify the force density are the material constant C_2 and the effective two-neighbor volume","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"    V_2^i = fracleft(V_mathcalH^iright)^2N_2^i","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"with the number of interactions N_2. ","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"The internal force density induced by two-neighbor interactions is ","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"    boldsymbolb_2^mathrmint  i = \n2  C_2 int_mathcalH_2^i d^ijk left( fraca^ijkA^ijk - 1 right)\nfracboldsymbolDelta x^ik times boldsymbola^ijka^ijk  mathrmd V_2^i  ","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"size symbol unit\nmaterial constant C_2 fracmathrmkgmathrmm^9mathrms^2\n(bond) failure d^ijk in 01 -\nrelative area measures A^ijk, a^ijk, boldsymbola^ijk mathrmm^2\neffective two-neighbor volume V_2^i = fracleft(V_mathcalH^iright)^2N_2^i mathrmm^6\nnumber of two-neighbor interactions N_2^i -","category":"page"},{"location":"continuumbased/#Three-neighbor-interactions","page":"Continuum-kinematics-inspired","title":"Three-neighbor interactions","text":"","category":"section"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"<img src=\"../assets/PD_ThreeNI_1.png\" width=\"250\"/>","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"Three-neighbor interactions regard the volume defined by the bond vectors between point i and its three neighbors j, k and l:","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"V^ijkl = left(boldsymbolDelta X^ij times boldsymbolDelta X^ikright) cdot boldsymbolDelta X^il  qquad\n    v^ijkl = left(boldsymbolDelta x^ij times boldsymbolDelta x^ikright) cdot boldsymbolDelta x^il  ","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"Additionally, the effective three-neighbor volume","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"    V_3^i = frac left(V_mathcalH^iright)^3N_3^i  ","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"is defined. For the internal force density of three-neighbor interactions, the equation","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"boldsymbolb_3^mathrmint  i = \n3  C_3 int_mathcalH_3^i d^ijkl left( fracleftv^ijklrightleftV^ijklright - 1 right)\nfracleft(boldsymbolDelta x^ik times boldsymbolDelta x^ilright) v^ijklleftv^ijklright  mathrmd V_3^i","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"with the material constant C_3 is used.","category":"page"},{"location":"continuumbased/","page":"Continuum-kinematics-inspired","title":"Continuum-kinematics-inspired","text":"size symbol unit\nmaterial constant C_3 fracmathrmkgmathrmm^13mathrms^2\n(bond) failure d^ijkl in 01 -\nrelative volume measures V^ijkl, v^ijkl mathrmm^3\neffective three-neighbor volume V_3^i = frac left(V_mathcalH^iright)^3N_3^i mathrmm^9\nnumber of three-neighbor interactions N_3^i -","category":"page"},{"location":"api_private/#Private-API","page":"Private API","title":"Private API","text":"","category":"section"},{"location":"api_private/","page":"Private API","title":"Private API","text":"Here, all non-exported types and methods are listed, which the average user does not need when using the package.","category":"page"},{"location":"api_private/","page":"Private API","title":"Private API","text":"","category":"page"},{"location":"api_private/","page":"Private API","title":"Private API","text":"Pages = [\"api_private.md\"]","category":"page"},{"location":"api_private/#Types","page":"Private API","title":"Types","text":"","category":"section"},{"location":"api_private/","page":"Private API","title":"Private API","text":"","category":"page"},{"location":"api_private/#Functions","page":"Private API","title":"Functions","text":"","category":"section"},{"location":"api_private/","page":"Private API","title":"Private API","text":"","category":"page"},{"location":"tensiletest/#TensileTest.jl","page":"TensileTest.jl","title":"TensileTest.jl","text":"","category":"section"},{"location":"tensiletest/#Quickstart","page":"TensileTest.jl","title":"Quickstart","text":"","category":"section"},{"location":"tensiletest/#Code:","page":"TensileTest.jl","title":"Code:","text":"","category":"section"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"using Peridynamics\npointcloud = read_inp(\"TensileTestMesh.inp\")\nmaterial = BBMaterial(; horizon=0.008, rho=2700, E=70e9, Gc=100)\nboundary_conditions = [\n    VelocityBC(t -> -0.8, pointcloud.point_sets[\"bottom\"], 1),\n    VelocityBC(t -> 0.8, pointcloud.point_sets[\"top\"], 1),\n]\njob = PDSingleBodyAnalysis(;\n    name=\"TensileTest\",\n    pc=pointcloud,\n    mat=material,\n    bcs=boundary_conditions,\n    td=TimeDiscretization(500),\n    es=ExportSettings(\"results/TensileTest\", 10),\n)\nsubmit(job)","category":"page"},{"location":"tensiletest/#Results:","page":"TensileTest.jl","title":"Results:","text":"","category":"section"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/blob/main/docs/src/assets/TensileTest.png?raw=true\" width=\"600\" />","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"(Visualization made with ParaView)","category":"page"},{"location":"tensiletest/#Step-by-step","page":"TensileTest.jl","title":"Step-by-step","text":"","category":"section"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"The script for this tutorial can be found here: TensileTest.jl.","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"First, we have to load the Peridynamics.jl package.","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"using Peridynamics","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"Now we create a PointCloud by converting the mesh from Abaqus. (Download the mesh)","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"pointcloud = read_inp(\"TensileTestMesh.inp\")","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/blob/main/docs/src/assets/TensileTestMesh.png?raw=true\" width=\"600\" />","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"Next, we need to specify material parameters. We define:","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"Horizon delta = 0008mathrmm\nDensity rho = 2700mathrmkgmathrmm^-3\nYoungs modulus E = 70 times 10^9  mathrmPa\nGriffith's parameter G_c = 100  mathrmN  mathrmm^-1","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"material = BBMaterial(; horizon=0.008, rho=2700, E=70e9, Gc=100)","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"As loading condition for the specimen, a constant velocity of 08  mathrmmmathrms^-1 in x-direction is set for the bottom and top. Note, that element sets defined in Abaqus are converted to point_sets of the PointCloud.","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"boundary_conditions = [\n    VelocityBC(t -> -0.8, pointcloud.point_sets[\"bottom\"], 1),\n    VelocityBC(t -> 0.8, pointcloud.point_sets[\"top\"], 1),\n]","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"With these at hand, a PDSingleBodyAnalysis can be constructed and submitted for calculation. We set the number of time steps for the explicit time integration to 500 with TimeDiscretization(500) and define that the results of our analysis should be saved in the directory \"results/TensileTest\" every 10'th time step.","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"job = PDSingleBodyAnalysis(;\n    name=\"TensileTest\",\n    pc=pointcloud,\n    mat=material,\n    bcs=boundary_conditions,\n    td=TimeDiscretization(500),\n    es=ExportSettings(\"results/TensileTest\", 10),\n)\nsubmit(job)","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"The output of submit(job) looks as follows:","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"======================================================================\nPERIDYNAMIC SIMULATION ON 8 THREADS\n======================================================================\nPeridynamic single body analysis: TensileTest\nMaterial parameters:\n  - Number of material points [-]:                               16900\n  - Material model:                                  BBMaterial\n  - Horizon δ [m]:                                               0.008\n  - Density ρ [kg/m³]:                                            2700\n  - Young's modulus E [N/m²]:                                    7e+10\n  - Poisson ratio ν [-]:                                          0.25\n  - Critical bond stretch εc[-]:                           0.000385758\nInteractions:\n  - Number of bonds [-]:                                       6667240\nTotal memory used by body [MB]:                                273.856\nExport setup:\n  - Export frequency:                                               10\n  - Export file name:         examples/results/TensileTest/TensileTest\nTime discretization:\n  - Time step Δt [s]:                                      5.13584e-07\n  - Number of time steps [-]:                                      500\n  - Simulation time horizon [s]:                           0.000256792\nTime integration... 100%|██████████████████████████████| Time: 0:00:13\n✓ Simulation completed after 16.7321 seconds\nResults:\n  - Max. abs. x-displacement [m]:                          0.000434543\n  - Max. abs. y-displacement [m]:                          0.000326501\n  - Max. abs. z-displacement [m]:                          0.000230936\n  - Max. damage [-]:                                                 1","category":"page"},{"location":"tensiletest/#No-fail-zone","page":"TensileTest.jl","title":"No-fail-zone","text":"","category":"section"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"As an improvement to the previous results, we can additionally set a no-fail-zone. It is a common problem for bond-based peridynamics, that to much damage occurs next to the points where boundary conditions apply. With these two lines, failure in the bottom and top of the specimen is disabled:","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"pointcloud.failure_flag[pointcloud.point_sets[\"bottom\"]] .= false\npointcloud.failure_flag[pointcloud.point_sets[\"top\"]] .= false","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"As a result, we have reduced the damage in the bottom and top of the specimen:","category":"page"},{"location":"tensiletest/","page":"TensileTest.jl","title":"TensileTest.jl","text":"<img src=\"https://github.com/kaipartmann/Peridynamics.jl/blob/main/docs/src/assets/TensileTestNoFailZone.png?raw=true\" width=\"600\" />","category":"page"},{"location":"nosbased/#Non-Ordinary-State-based","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"","category":"section"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"Non-ordinary state based-formulations have been developed to extend state-based peridynamics. Hereafter, the correspondence formulation of non-ordinary state based peridynamics is considered, which uses an elastic model from the classical theory. [4]","category":"page"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"First, the symmetric shape tensor is calculated:","category":"page"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"boldsymbolK^i = boldsymbolK(boldsymbolX^i) = int_mathcalH_i omega  boldsymbolDelta X^ij otimes boldsymbolDelta X^ij  mathrmdV^j  ","category":"page"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"Here, omega is an influence function to weigh points differently. The deformation gradient is thus approximated as [4]","category":"page"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"boldsymbolF^i = boldsymbolF(boldsymbolX^it) = left(int_mathcalH_i omega  boldsymbolDelta x^ij otimes boldsymbolDelta X^ij  mathrmdV^jright) left(boldsymbolK^iright)^-1  ","category":"page"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"Using the deformation gradient, now the first Piola Kirchhoff stress tensor can be determined with the Helmholtz energy density Psi:","category":"page"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"boldsymbolP^i = boldsymbolP(boldsymbolX^it) = fracpartial Psipartial boldsymbolF^i  = boldsymbolF boldsymbolS  ","category":"page"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"Using the calculated variables, the force vector state can now be determined by [4]","category":"page"},{"location":"nosbased/","page":"Non-Ordinary State-based","title":"Non-Ordinary State-based","text":"boldsymbolt^i = omega boldsymbolP^i  left(boldsymbolK^iright)^-1 boldsymbolDelta X^ij  ","category":"page"},{"location":"osbased/#statebased","page":"Ordinary State-based","title":"Ordinary State-based","text":"","category":"section"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"The state-based peridynamics formulation considers not only the deformation of the bonds of one material point as the bond-based model does, but also the states of all neighbors to calculate the internal force density boldsymbolb^mathrminti [4]:","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"boldsymbolb^mathrmint (boldsymbolX^it) = int_mathcalH_i boldsymbolt^i - boldsymbolt^j  mathrmdV^j  ","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"with the force vector states boldsymbolt^i=boldsymbolt(boldsymbolDelta X^ij t) and boldsymbolt^j=boldsymbolt(-boldsymbolDelta X^ij t), which characterize the state of each bond at time t.","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"To determine the force vector state, the extension scalar state e is required first. It describes the change in length of a bond due to deformation, consisting of a spherical and a deviatoric component:","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"e langle boldsymbolDelta X^ij rangle = boldsymbolDelta x^ij-boldsymbolDelta X^ij\n= e^sph langle boldsymbolDelta X^ij rangle + e^dev langle boldsymbolDelta X^ij rangle  ","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"Next, the weighted volume m_i is calculated as","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"m_i = left(omega langle boldsymbolDelta X^ij rangle cdot  boldsymbolDelta X^ij right) bullet  boldsymbolDelta X^ij  = int_mathcalH_i omega langle boldsymbolDelta X^ij rangle cdot  boldsymbolDelta X^ij ^2 mathrmd V_j  ","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"Here omega is an influence function that gives greater weight to shorter bonds. [4]","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"Then the dilatation theta_i is needed, which is determined with the weighted volume m_i:","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"theta_i = frac3m_i left(omega langle boldsymbolDelta X^ij rangle cdot  boldsymbolDelta X^ij right) bullet e langle boldsymbolDelta X^ij rangle\n= frac3m_i int_mathcalH_i omega langle boldsymbolDelta X^ij rangle cdot  boldsymbolDelta X^ij  cdot e langle boldsymbolDelta X^ij rangle mathrmd V_j  ","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"The spherical component of the extension scalar state e results in ","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"e^sph langle boldsymbolDelta X^ij rangle = fractheta_i cdot boldsymbolDelta X^ij3","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"and the deviatoric component in","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"e^dev langle boldsymbolDelta X^ij rangle = boldsymbolDelta x^ij-boldsymbolDelta X^ij - fractheta_i cdot boldsymbolDelta X^ij3  ","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"With the previously determined variables, the force vector state boldsymbolt can now be calculated: [4]","category":"page"},{"location":"osbased/","page":"Ordinary State-based","title":"Ordinary State-based","text":"underlinet_i boldsymbolt^i langle boldsymbolDelta X^ij rangle = frackappa cdot theta_im_i cdot omega langle boldsymbolDelta X^ij rangle cdot  boldsymbolDelta X^ij  + frac15 cdot mum_i cdot omega langle boldsymbolDelta X^ij rangle cdot e^dev langle boldsymbolDelta X^ij rangle  ","category":"page"},{"location":"#Peridynamics","page":"Home","title":"Peridynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A high-level Julia package for multithreaded peridynamics simulations","category":"page"},{"location":"#What-is-peridynamics?","page":"Home","title":"What is peridynamics?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Peridynamics is a non-local formulation of continuum mechanics where material points represent the continuum, and the relative displacements and forces are governed by an integro-differential equation that allows discontinuities. As a result, peridynamics is particularly well-suited for dynamic fracture simulations involving numerous cracks.","category":"page"},{"location":"#Who-can-benefit-from-this-package?","page":"Home","title":"Who can benefit from this package?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is designed for anyone interested in performing peridynamics simulations. While the current feature set provides a solid foundation, we are continuously working to enhance and expand the capabilities of Peridynamics.jl. We encourage you to open an issue or submit a pull request to share your feedback or contribute to making this package even more valuable to the community!","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Peridynamics.jl, follow these steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install Julia from the official Julia website if you haven't already.\nLaunch Julia and open the Julia REPL.\nEnter the package manager by pressing ] in the REPL.\nIn the package manager, type:\nadd Peridynamics\nPress Backspace or Ctrl + C to exit the package manager.","category":"page"},{"location":"#How-to-guides","page":"Home","title":"How-to guides","text":"","category":"section"},{"location":"#How-to-perform-a","page":"Home","title":"How to perform a","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Single body analysis\nContact analysis","category":"page"},{"location":"#How-to-define","page":"Home","title":"How to define","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Point clouds\nPredefined cracks\nMaterial formulations","category":"page"},{"location":"#How-to","page":"Home","title":"How to","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Visualize results with ParaView","category":"page"},{"location":"#Tutorials","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-grid\"> ","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\"> ","category":"page"},{"location":"#[Mode-I-tension-quasi-static](@ref-tutorial_tension_static)","page":"Home","title":"Mode I tension quasi-static","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"</div> ","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\"> ","category":"page"},{"location":"#[Mode-I-tension-dynamic](@ref-tutorial_tension_dynfrac)","page":"Home","title":"Mode I tension dynamic","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\"> ","category":"page"},{"location":"#[Mode-I-tension-dynamic-with-predefined-crack](@ref-tutorial_tension_precrack)","page":"Home","title":"Mode I tension dynamic with predefined crack","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"</div> ","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"tutorial-element\"> ","category":"page"},{"location":"#[Peridynamics.jl-logo](@ref-tutorial_logo)","page":"Home","title":"Peridynamics.jl logo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"</div>","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<ul>\n<li><a href=\"https://orcid.org/0000-0002-5238-4355\">Kai Partmann (University of Siegen) <img alt=\"ORCID logo\" src=\"https://info.orcid.org/wp-content/uploads/2019/11/orcid_16x16.png\" width=\"16\" height=\"16\" /></a></li>\n<li><a href=\"https://orcid.org/0009-0004-9195-0112\">Manuel Dienst (University of Siegen) <img alt=\"ORCID logo\" src=\"https://info.orcid.org/wp-content/uploads/2019/11/orcid_16x16.png\" width=\"16\" height=\"16\" /></a></li>\n<li><a href=\"https://orcid.org/0000-0002-2213-8401\">Kerstin Weinberg (University of Siegen) <img alt=\"ORCID logo\" src=\"https://info.orcid.org/wp-content/uploads/2019/11/orcid_16x16.png\" width=\"16\" height=\"16\" /></a></li>\n</ul>","category":"page"},{"location":"#Acknowledgement","page":"Home","title":"Acknowledgement","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=https://github.com/kaipartmann/Peridynamics.jl/assets/68582683/0d14a65b-4e05-4408-8107-59ac9c1477d2 width=500>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The authors gratefully acknowledge the support of the Deutsche Forschungsgemeinschaft (DFG) under the project WE2525-14/1.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"EditURL = \"../literate/tutorial_wave_in_bar.jl\"","category":"page"},{"location":"generated/tutorial_wave_in_bar/#Pressure-wave-in-bar","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"","category":"section"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"In this tutorial, a cuboid bar is created. A velocity pulse in the form of one period of a sine wave is applied to create a pressure wave that propagates through the bar.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"First import the Peridynamics.jl package:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"using Peridynamics","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"To get started, some parameters used to for this simulation are defined. These are the length of the bar lx, the width and height lyz and the number of points in the width npyz.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"lx = 0.2\nlyz = 0.002\nnpyz = 4","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"With these parameters the point spacing can be calculated:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"Δx = lyz / npyz","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"A cuboid body according to the ordinary state-based model with the specified dimensions and point spacing is then created:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"pos, vol = uniform_box(lx, lyz, lyz, Δx)\nbody = Body(OSBMaterial(), pos, vol)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"Failure is prohibited throughout the body:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"failure_permit!(body, false)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"Following material parameters are specified:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"material parameter value\nHorizon $ δ $ 3015 cdot Δx\nDensity ρ $ 7850\\,\\mathrm{kg}\\,\\mathrm{m}^{-3}$\nYoung's modulus E $ 210 \\, \\mathrm{GPa}$\nPoisson's ratio ν 025\ncritical strain ε_c 001","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"material!(body, horizon=3.015Δx, rho=7850.0, E=210e9, nu=0.25, epsilon_c=0.01)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"Point set :left including the first row of points in x-direction is created:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"point_set!(x -> x < -lx / 2 + 1.2Δx, body, :left)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"The velocity boundary condition of the form","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"    v_x (t) =\n    begincases\n        v_mathrmmax cdot sin(2pi cdot fractT) qquad\n         forall  0 leq t leq T \n        0 textelse\n    endcases","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"is applied to point set :left. The parameters used for this excitation are period length T and amplitude vmax.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"T, vmax = 1.0e-5, 2.0\nvelocity_bc!(t -> t < T ? vmax * sin(2π / T * t) : 0.0, body, :left, :x)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"(Image: ) The Velocity Verlet algorithm is used as time integration method and 2000 time steps are calculated:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"vv = VelocityVerlet(steps=2000)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"Then the storage path is defined:","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"path = joinpath(@__DIR__, \"results\", \"xwave\", \"xwave_osb\")","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"The job is now defined with the specified settings and parameters.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"job = Job(body, vv; path=path)","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"The last step is submitting the job to start the simulation.","category":"page"},{"location":"generated/tutorial_wave_in_bar/","page":"Pressure wave in bar","title":"Pressure wave in bar","text":"submit(job);","category":"page"}]
}
